id: win-policy
mode: VALIDATION
resourceGroups: 
  - resources: 
      exec: 
        validate: 
          interpreter: POWERSHELL
          script: |
              Start-Transcript -Path "C:\transcript.log"
              
              function Set-RDPService ()
              {
                  $RDP_Status = $false
              
                  try
                  {
                      # Start RDP service
                      Write-Host "Attempting to start RDP service"
                      Set-Service -Name TermService -Status Running -StartupType Automatic
                      $RDP_Status = $true
                  }
                  catch 
                  {
                      throw "Error starting RDP service: $Error[0]"
                  }
                  return $RDP_Status
              }
              
              function Set-FirewallDisable ()
              {
                  $Firewall_Disabled_Status = $false
              
                  try
                  {
                      # Disable firewall
                      Write-Host "Attempting to disable firewall"
                      Set-NetFirewallProfile -Profile Domain, Public, Private -Enabled False
                      $Firewall_Disabled_Status = $true
                  }
                  catch
                  {
                      throw "Error disabling firewall: $Error[0]"
                  }
                  return $Firewall_Disabled_Status
              }
              
              function Set-RDPConnections ()
              {
                  $RDP_Connections_Status = $false
              
                  try
                  {
                      Write-Host "Attempting to enable RDP connections"
                      # Enable RDP connections
                      reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /f /v fDenyTSConnections /t REG_DWORD /d 0    
                      $RDP_Connections_Status = $true
                  }
                  catch
                  {
                      throw "Error enabling RDP connections: $Error[0]"
                  }
                  return $RDP_Connections_Status
              }
              
              function Set-RDPDefaultSecurityNeg ()
              {
                  $RDP_Default_Sec_Status = $false
              
                  try
                  {
                      Write-Host "Attempting to reset RDP security negotiation to default"
                      # Reset client/server security negotiation to its default value
                      reg add "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v SecurityLayer /t REG_DWORD /d 1 /f
                      $RDP_Default_Sec_Status = $true
                  }
                  catch
                  {
                      throw "Error resetting RDP security to default: $Error[0]"
                  }
                  return $RDP_Default_Sec_Status
              }
              
              function Set-RDPDefaultNLA ()
              {
                  $RDP_Default_NLA_Status = $false
              
                  try
                  {
                      Write-Host "Attempting to reset RDP NLA to default"
                      # Reset user network level authentication to its default value:
                      reg add "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /t REG_DWORD /d 0 /f    
                      $RDP_Default_NLA_Status = $true
                  }
                  catch
                  {
                      throw "Error resetting RDP NLA setting to default: $Error[0]"
                  }
                  return $RDP_Default_NLA_Status
              }
              
              function Set-NetworkAdapterDHCP ()
              {             
                  $Network_Adapter_DHCP_Status = $false

                  try
                  {
                      Write-Host "Attempting to enable DHCP for Ethernet adapters"
                      # Set network to DHCP mode
                      netsh interface ipv4 set address "Ethernet" dhcp
                      $Network_Adapter_DHCP_Status = $true
                  }
                  catch
                  {
                      throw "Error changing Network adapter to DHCP mode: $Error[0]"
                  }
                  return $Network_Adapter_DHCP_Status
              }
              
              function Repair-GCEInstanceRDP()
              {
                  $r1 = Set-RDPService
                  $r2 = Set-FirewallDisable
                  $r3 = Set-RDPConnections
                  $r4 = Set-RDPDefaultSecurityNeg
                  $r5 = Set-RDPDefaultNLA
                  $r6 = Set-NetworkAdapterDHCP
                  
                  if (($r1 -and $r2 -and $r3 -and $r4 -and $r5 -and $r6) -eq $true)
                  {
                      Write-Host "Successfully repaired RDP configurations"
                      exit 100
                  }
                  else
                  {
                    Write-Host "Not all settings successfully changed. See C:\transcript.log for more information."
                    exit 101
                  }           
              }
              
              Repair-GCEInstanceRDP
      
      id: restore-rdp-powershell
