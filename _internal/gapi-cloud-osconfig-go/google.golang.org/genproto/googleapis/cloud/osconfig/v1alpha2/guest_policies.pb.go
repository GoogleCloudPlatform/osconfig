// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/osconfig/v1alpha2/guest_policies.proto

package osconfig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The desired state that the OS Config agent will maintain on the VM.
type DesiredState int32

const (
	// The default is to ensure the package is installed.
	DesiredState_DESIRED_STATE_UNSPECIFIED DesiredState = 0
	// The agent will ensure that the package is installed.
	DesiredState_INSTALLED DesiredState = 1
	// The agent will ensure that the package is installed and will
	// periodically check for and install any updates.
	DesiredState_UPDATED DesiredState = 2
	// The agent will ensure that the package is not installed and uninstall it
	// if detected.
	DesiredState_REMOVED DesiredState = 3
)

var DesiredState_name = map[int32]string{
	0: "DESIRED_STATE_UNSPECIFIED",
	1: "INSTALLED",
	2: "UPDATED",
	3: "REMOVED",
}

var DesiredState_value = map[string]int32{
	"DESIRED_STATE_UNSPECIFIED": 0,
	"INSTALLED":                 1,
	"UPDATED":                   2,
	"REMOVED":                   3,
}

func (x DesiredState) String() string {
	return proto.EnumName(DesiredState_name, int32(x))
}

func (DesiredState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{0}
}

// Types of package managers that may be used to manage this package.
type Package_Manager int32

const (
	// The default behavior is ANY.
	Package_MANAGER_UNSPECIFIED Package_Manager = 0
	// Apply this package config using the default system package manager.
	Package_ANY Package_Manager = 1
	// Apply this package config only if Apt is available on the system.
	Package_APT Package_Manager = 2
	// Apply this package config only if Yum is available on the system.
	Package_YUM Package_Manager = 3
	// Apply this package config only if Zypper is available on the system.
	Package_ZYPPER Package_Manager = 4
	// Apply this package config only if GooGet is available on the system.
	Package_GOO Package_Manager = 5
)

var Package_Manager_name = map[int32]string{
	0: "MANAGER_UNSPECIFIED",
	1: "ANY",
	2: "APT",
	3: "YUM",
	4: "ZYPPER",
	5: "GOO",
}

var Package_Manager_value = map[string]int32{
	"MANAGER_UNSPECIFIED": 0,
	"ANY":                 1,
	"APT":                 2,
	"YUM":                 3,
	"ZYPPER":              4,
	"GOO":                 5,
}

func (x Package_Manager) String() string {
	return proto.EnumName(Package_Manager_name, int32(x))
}

func (Package_Manager) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{2, 0}
}

// Type of archive.
type AptRepository_ArchiveType int32

const (
	// Unspecified.
	AptRepository_ARCHIVE_TYPE_UNSPECIFIED AptRepository_ArchiveType = 0
	// Deb indicates that the archive contains binary files.
	AptRepository_DEB AptRepository_ArchiveType = 1
	// Deb-src indicates that the archive contains source files.
	AptRepository_DEB_SRC AptRepository_ArchiveType = 2
)

var AptRepository_ArchiveType_name = map[int32]string{
	0: "ARCHIVE_TYPE_UNSPECIFIED",
	1: "DEB",
	2: "DEB_SRC",
}

var AptRepository_ArchiveType_value = map[string]int32{
	"ARCHIVE_TYPE_UNSPECIFIED": 0,
	"DEB":                      1,
	"DEB_SRC":                  2,
}

func (x AptRepository_ArchiveType) String() string {
	return proto.EnumName(AptRepository_ArchiveType_name, int32(x))
}

func (AptRepository_ArchiveType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{3, 0}
}

// Specifying the type of archive.
type SoftwareRecipe_Step_ExtractArchive_ArchiveType int32

const (
	// Indicates that the archive type isn't specified.
	SoftwareRecipe_Step_ExtractArchive_ARCHIVE_TYPE_UNSPECIFIED SoftwareRecipe_Step_ExtractArchive_ArchiveType = 0
	// Indicates that the archive is a tar archive with no encryption.
	SoftwareRecipe_Step_ExtractArchive_TAR SoftwareRecipe_Step_ExtractArchive_ArchiveType = 1
	// Indicates that the archive is a tar archive with gzip encryption.
	SoftwareRecipe_Step_ExtractArchive_TAR_GZIP SoftwareRecipe_Step_ExtractArchive_ArchiveType = 2
	// Indicates that the archive is a tar archive with bzip encryption.
	SoftwareRecipe_Step_ExtractArchive_TAR_BZIP SoftwareRecipe_Step_ExtractArchive_ArchiveType = 3
	// Indicates that the archive is a tar archive with lzma encryption.
	SoftwareRecipe_Step_ExtractArchive_TAR_LZMA SoftwareRecipe_Step_ExtractArchive_ArchiveType = 4
	// Indicates that the archive is a tar archive with xz encryption.
	SoftwareRecipe_Step_ExtractArchive_TAR_XZ SoftwareRecipe_Step_ExtractArchive_ArchiveType = 5
	// Indicates that the archive is a zip archive.
	SoftwareRecipe_Step_ExtractArchive_ZIP SoftwareRecipe_Step_ExtractArchive_ArchiveType = 11
)

var SoftwareRecipe_Step_ExtractArchive_ArchiveType_name = map[int32]string{
	0:  "ARCHIVE_TYPE_UNSPECIFIED",
	1:  "TAR",
	2:  "TAR_GZIP",
	3:  "TAR_BZIP",
	4:  "TAR_LZMA",
	5:  "TAR_XZ",
	11: "ZIP",
}

var SoftwareRecipe_Step_ExtractArchive_ArchiveType_value = map[string]int32{
	"ARCHIVE_TYPE_UNSPECIFIED": 0,
	"TAR":                      1,
	"TAR_GZIP":                 2,
	"TAR_BZIP":                 3,
	"TAR_LZMA":                 4,
	"TAR_XZ":                   5,
	"ZIP":                      11,
}

func (x SoftwareRecipe_Step_ExtractArchive_ArchiveType) String() string {
	return proto.EnumName(SoftwareRecipe_Step_ExtractArchive_ArchiveType_name, int32(x))
}

func (SoftwareRecipe_Step_ExtractArchive_ArchiveType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1, 1, 0}
}

// The interpreter used to execute a script.
type SoftwareRecipe_Step_RunScript_Interpreter int32

const (
	// Default value for ScriptType.
	SoftwareRecipe_Step_RunScript_INTERPRETER_UNSPECIFIED SoftwareRecipe_Step_RunScript_Interpreter = 0
	// Indicates that the script will be run with /bin/sh on Linux and cmd
	// on windows.
	SoftwareRecipe_Step_RunScript_SHELL SoftwareRecipe_Step_RunScript_Interpreter = 1
	// Indicates that the script will be run with powershell.
	SoftwareRecipe_Step_RunScript_POWERSHELL SoftwareRecipe_Step_RunScript_Interpreter = 3
)

var SoftwareRecipe_Step_RunScript_Interpreter_name = map[int32]string{
	0: "INTERPRETER_UNSPECIFIED",
	1: "SHELL",
	3: "POWERSHELL",
}

var SoftwareRecipe_Step_RunScript_Interpreter_value = map[string]int32{
	"INTERPRETER_UNSPECIFIED": 0,
	"SHELL":                   1,
	"POWERSHELL":              3,
}

func (x SoftwareRecipe_Step_RunScript_Interpreter) String() string {
	return proto.EnumName(SoftwareRecipe_Step_RunScript_Interpreter_name, int32(x))
}

func (SoftwareRecipe_Step_RunScript_Interpreter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1, 6, 0}
}

// An OS Config resource representing a guest configuration policy. These
// policies represent the desired state for a VM's guest environment including
// packages to install or remove, package repository configurations, and
// software to install.
type GuestPolicy struct {
	// Unique name of the resource in this project using the form:
	//     `projects/{project_id}/guestPolicies/{guest_policy_id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the GuestPolicy. Length of the description is limited
	// to 1024 characters.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Time this GuestPolicy was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Last time this GuestPolicy was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Specifies the VMs that are assigned this policy. This allows you to target
	// sets or groups of VMs by different parameters such as labels, names, OS,
	// or zones.
	//
	// Empty assignments will target ALL VMs underneath this policy.
	//
	//
	// Conflict Management
	//
	// Policies that exist higher up in the resource hierarchy (closer to the Org)
	// will override those lower down if there is a conflict.
	//
	// At the same level in the resource hierarchy (ie. within a project), the
	// service will prevent the creation of multiple policies that conflict with
	// each other. If there are multiple policies that specify the same config
	// (eg. package, software recipe, repository, etc.), the service will ensure
	// that no VM could potentially receive instructions from both policies. To
	// create multiple policies that specify different versions of a package or
	// different configs for different Operating Systems, each policy must be
	// mutually exclusive in their targeting according to labels, OS, or other
	// criteria.
	//
	// Different configs are identified for conflicts in different ways. Packages
	// are identified by their name and the package manager(s) they target.
	// Package repositories are identified by their unique id where applicable.
	// Some package managers don't have a unique identifier for repositories and
	// where that's the case, no uniqueness is validated by the service.
	//
	// Note that if OS Inventory is disabled, a VM will not be assigned a policy
	// that targets by OS because the service will see this VM's OS as unknown.
	Assignment *Assignment `protobuf:"bytes,6,opt,name=assignment,proto3" json:"assignment,omitempty"`
	// The software packages to be managed by this policy.
	Packages []*Package `protobuf:"bytes,7,rep,name=packages,proto3" json:"packages,omitempty"`
	// Optional. A list of package repositories to configure on the VM. This will
	// be done before any other configs are applied so they can use these repos.
	// Package repositories will only be configured if the corresponding package
	// manager(s) are available.
	PackageRepositories []*PackageRepository `protobuf:"bytes,8,rep,name=package_repositories,json=packageRepositories,proto3" json:"package_repositories,omitempty"`
	// Optional. A list of Recipes to install on the VM.
	Recipes []*SoftwareRecipe `protobuf:"bytes,9,rep,name=recipes,proto3" json:"recipes,omitempty"`
	// The etag for this GuestPolicy.
	// If this is provided on update, it must match the server's etag.
	Etag                 string   `protobuf:"bytes,10,opt,name=etag,proto3" json:"etag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuestPolicy) Reset()         { *m = GuestPolicy{} }
func (m *GuestPolicy) String() string { return proto.CompactTextString(m) }
func (*GuestPolicy) ProtoMessage()    {}
func (*GuestPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{0}
}

func (m *GuestPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuestPolicy.Unmarshal(m, b)
}
func (m *GuestPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuestPolicy.Marshal(b, m, deterministic)
}
func (m *GuestPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuestPolicy.Merge(m, src)
}
func (m *GuestPolicy) XXX_Size() int {
	return xxx_messageInfo_GuestPolicy.Size(m)
}
func (m *GuestPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_GuestPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_GuestPolicy proto.InternalMessageInfo

func (m *GuestPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuestPolicy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GuestPolicy) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *GuestPolicy) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *GuestPolicy) GetAssignment() *Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func (m *GuestPolicy) GetPackages() []*Package {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *GuestPolicy) GetPackageRepositories() []*PackageRepository {
	if m != nil {
		return m.PackageRepositories
	}
	return nil
}

func (m *GuestPolicy) GetRecipes() []*SoftwareRecipe {
	if m != nil {
		return m.Recipes
	}
	return nil
}

func (m *GuestPolicy) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

// An Assignment represents the group or groups of VMs that the policy
// applies to.
//
// If an Assignment is empty, it applies to all VMs. Otherwise, the targeted
// VMs must meet ALL criteria specified. So if both labels and zones are
// specified, the policy will apply to VMs with those labels AND in those
// zones.
type Assignment struct {
	// Targets instances matching at least one of these label sets. This allows
	// an assignment to target disparate groups, for example "env=prod or
	// env=staging".
	GroupLabels []*Assignment_GroupLabel `protobuf:"bytes,1,rep,name=group_labels,json=groupLabels,proto3" json:"group_labels,omitempty"`
	// Targets instances in ANY of these zones. Leave empty to target instances
	// in any zone.
	//
	// Zonal targeting is uncommon and is supported to facilitate orchestrating
	// changes by zone.
	Zones []string `protobuf:"bytes,2,rep,name=zones,proto3" json:"zones,omitempty"`
	// Targets any of the instances specified. Instances are specified by their
	// URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]` or
	// `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
	//
	// Instance targeting is uncommon and is supported to facilitate
	// orchestrating changes by instance or to target specific VMs for
	// development and testing.
	//
	// Only supported for project-level policies and must reference instances
	// within this project.
	Instances []string `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty"`
	// Targets VMs whose name starts with one of these prefixes.
	//
	// Like labels, this is another way to group VMs when targeting configs, for
	// example prefix=”prod-”.
	//
	// Only supported for project-level policies.
	InstanceNamePrefixes []string `protobuf:"bytes,4,rep,name=instance_name_prefixes,json=instanceNamePrefixes,proto3" json:"instance_name_prefixes,omitempty"`
	// Targets VMs with OS Inventory enabled and having one of the following OS
	// short names, for example "debian", "windows".
	OsShortNames []string `protobuf:"bytes,5,rep,name=os_short_names,json=osShortNames,proto3" json:"os_short_names,omitempty"`
	// Targets VMs with OS Inventory enabled and having one of the following OS
	// versions.
	OsVersions []string `protobuf:"bytes,6,rep,name=os_versions,json=osVersions,proto3" json:"os_versions,omitempty"`
	// Targets VMs with OS Inventory enabled and having one of the following OS
	// architectures.
	OsArchitectures      []string `protobuf:"bytes,7,rep,name=os_architectures,json=osArchitectures,proto3" json:"os_architectures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Assignment) Reset()         { *m = Assignment{} }
func (m *Assignment) String() string { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()    {}
func (*Assignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{1}
}

func (m *Assignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Assignment.Unmarshal(m, b)
}
func (m *Assignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Assignment.Marshal(b, m, deterministic)
}
func (m *Assignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment.Merge(m, src)
}
func (m *Assignment) XXX_Size() int {
	return xxx_messageInfo_Assignment.Size(m)
}
func (m *Assignment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment proto.InternalMessageInfo

func (m *Assignment) GetGroupLabels() []*Assignment_GroupLabel {
	if m != nil {
		return m.GroupLabels
	}
	return nil
}

func (m *Assignment) GetZones() []string {
	if m != nil {
		return m.Zones
	}
	return nil
}

func (m *Assignment) GetInstances() []string {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *Assignment) GetInstanceNamePrefixes() []string {
	if m != nil {
		return m.InstanceNamePrefixes
	}
	return nil
}

func (m *Assignment) GetOsShortNames() []string {
	if m != nil {
		return m.OsShortNames
	}
	return nil
}

func (m *Assignment) GetOsVersions() []string {
	if m != nil {
		return m.OsVersions
	}
	return nil
}

func (m *Assignment) GetOsArchitectures() []string {
	if m != nil {
		return m.OsArchitectures
	}
	return nil
}

// Represents a group of VMs that can be identified as having all these
// labels, for example "env=prod and app=web".
type Assignment_GroupLabel struct {
	// GCE instance labels that must be present for an instance to be included
	// in this assignment group.
	Labels               map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Assignment_GroupLabel) Reset()         { *m = Assignment_GroupLabel{} }
func (m *Assignment_GroupLabel) String() string { return proto.CompactTextString(m) }
func (*Assignment_GroupLabel) ProtoMessage()    {}
func (*Assignment_GroupLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{1, 0}
}

func (m *Assignment_GroupLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Assignment_GroupLabel.Unmarshal(m, b)
}
func (m *Assignment_GroupLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Assignment_GroupLabel.Marshal(b, m, deterministic)
}
func (m *Assignment_GroupLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment_GroupLabel.Merge(m, src)
}
func (m *Assignment_GroupLabel) XXX_Size() int {
	return xxx_messageInfo_Assignment_GroupLabel.Size(m)
}
func (m *Assignment_GroupLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment_GroupLabel.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment_GroupLabel proto.InternalMessageInfo

func (m *Assignment_GroupLabel) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Package is a reference to the software package to be installed or removed.
// The agent on the VM will use the system package manager to apply the
// config.
//
//
// These are the commands that the agent will use to install or remove
// packages.
//
// Apt
// install: `apt-get update && apt-get -y install package1 package2 package3`
// remove: `apt-get -y remove package1 package2 package3`
//
// Yum
// install: `yum -y install package1 package2 package3`
// remove: `yum -y remove package1 package2 package3`
//
// Zypper
// install: `zypper install package1 package2 package3`
// remove: `zypper rm package1 package2`
//
// Googet
// install: `googet -noconfirm install package1 package2 package3`
// remove: `googet -noconfirm remove package1 package2 package3`
type Package struct {
	// The name of the package. A package is uniquely identified for conflict
	// validation by checking its name and the manager(s) it targets.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The desired_state the agent should maintain for this package. The
	// default is to ensure the package is installed.
	DesiredState DesiredState `protobuf:"varint,2,opt,name=desired_state,json=desiredState,proto3,enum=google.cloud.osconfig.v1alpha2.DesiredState" json:"desired_state,omitempty"`
	// Optional. Type of package manager that can be used to install this package.
	// If a system does not have the package manager, the package will not be
	// installed/removed and there is no error. By default or when specifying ANY,
	// the agent will attempt to install and remove this package using the default
	// package manager. This is helpful when creating a policy that applies to
	// different types of systems.
	//
	// The default behavior is ANY.
	Manager Package_Manager `protobuf:"varint,3,opt,name=manager,proto3,enum=google.cloud.osconfig.v1alpha2.Package_Manager" json:"manager,omitempty"`
	// Optional. The version of the package to install. If omitted, the agent
	// will install the latest version.  Should only by supplied if the
	// DesiredState is INSTALLED.
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Package) Reset()         { *m = Package{} }
func (m *Package) String() string { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()    {}
func (*Package) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{2}
}

func (m *Package) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Package.Unmarshal(m, b)
}
func (m *Package) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Package.Marshal(b, m, deterministic)
}
func (m *Package) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Package.Merge(m, src)
}
func (m *Package) XXX_Size() int {
	return xxx_messageInfo_Package.Size(m)
}
func (m *Package) XXX_DiscardUnknown() {
	xxx_messageInfo_Package.DiscardUnknown(m)
}

var xxx_messageInfo_Package proto.InternalMessageInfo

func (m *Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Package) GetDesiredState() DesiredState {
	if m != nil {
		return m.DesiredState
	}
	return DesiredState_DESIRED_STATE_UNSPECIFIED
}

func (m *Package) GetManager() Package_Manager {
	if m != nil {
		return m.Manager
	}
	return Package_MANAGER_UNSPECIFIED
}

func (m *Package) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Represents a single apt package repository. These will be added to a repo
// file that will be managed at /etc/apt/sources.list.d/google_osconfig.list.
type AptRepository struct {
	// Type of archive files in this repository. The default behavior is DEB.
	ArchiveType AptRepository_ArchiveType `protobuf:"varint,1,opt,name=archive_type,json=archiveType,proto3,enum=google.cloud.osconfig.v1alpha2.AptRepository_ArchiveType" json:"archive_type,omitempty"`
	// Required. URI for this repository.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// Required. Distribution of this repository.
	Distribution string `protobuf:"bytes,3,opt,name=distribution,proto3" json:"distribution,omitempty"`
	// List of components for this repository. Must contain at least one item.
	Components []string `protobuf:"bytes,4,rep,name=components,proto3" json:"components,omitempty"`
	// Optional. URI of the key file for this repository. The agent will ensure
	// that this key has been downloaded.
	GpgKey               string   `protobuf:"bytes,5,opt,name=gpg_key,json=gpgKey,proto3" json:"gpg_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AptRepository) Reset()         { *m = AptRepository{} }
func (m *AptRepository) String() string { return proto.CompactTextString(m) }
func (*AptRepository) ProtoMessage()    {}
func (*AptRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{3}
}

func (m *AptRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AptRepository.Unmarshal(m, b)
}
func (m *AptRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AptRepository.Marshal(b, m, deterministic)
}
func (m *AptRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AptRepository.Merge(m, src)
}
func (m *AptRepository) XXX_Size() int {
	return xxx_messageInfo_AptRepository.Size(m)
}
func (m *AptRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_AptRepository.DiscardUnknown(m)
}

var xxx_messageInfo_AptRepository proto.InternalMessageInfo

func (m *AptRepository) GetArchiveType() AptRepository_ArchiveType {
	if m != nil {
		return m.ArchiveType
	}
	return AptRepository_ARCHIVE_TYPE_UNSPECIFIED
}

func (m *AptRepository) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *AptRepository) GetDistribution() string {
	if m != nil {
		return m.Distribution
	}
	return ""
}

func (m *AptRepository) GetComponents() []string {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *AptRepository) GetGpgKey() string {
	if m != nil {
		return m.GpgKey
	}
	return ""
}

// Represents a single yum package repository. These will be added to a repo
// file that will be managed at /etc/yum.repos.d/google_osconfig.repo.
type YumRepository struct {
	// Required. A one word, unique name for this repository. This will be
	// the `repo id` in the yum config file and also the `display_name` if
	// `display_name` is omitted. This id is also used as the unique identifier
	// when checking for GuestPolicy conflicts.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Required. The location of the repository directory.
	BaseUrl string `protobuf:"bytes,3,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// Optional. URIs of GPG keys.
	GpgKeys              []string `protobuf:"bytes,4,rep,name=gpg_keys,json=gpgKeys,proto3" json:"gpg_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YumRepository) Reset()         { *m = YumRepository{} }
func (m *YumRepository) String() string { return proto.CompactTextString(m) }
func (*YumRepository) ProtoMessage()    {}
func (*YumRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{4}
}

func (m *YumRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YumRepository.Unmarshal(m, b)
}
func (m *YumRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YumRepository.Marshal(b, m, deterministic)
}
func (m *YumRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YumRepository.Merge(m, src)
}
func (m *YumRepository) XXX_Size() int {
	return xxx_messageInfo_YumRepository.Size(m)
}
func (m *YumRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_YumRepository.DiscardUnknown(m)
}

var xxx_messageInfo_YumRepository proto.InternalMessageInfo

func (m *YumRepository) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *YumRepository) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *YumRepository) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *YumRepository) GetGpgKeys() []string {
	if m != nil {
		return m.GpgKeys
	}
	return nil
}

// Represents a single zypper package repository. These will be added to a
// repo file that will be managed at /etc/zypp/repos.d/google_osconfig.repo.
type ZypperRepository struct {
	// Required. A one word, unique name for this repository. This will be
	// the `repo id` in the zypper config file and also the `display_name` if
	// `display_name` is omitted. This id is also used as the unique identifier
	// when checking for GuestPolicy conflicts.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Required. The location of the repository directory.
	BaseUrl string `protobuf:"bytes,3,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// Optional. URIs of GPG keys.
	GpgKeys              []string `protobuf:"bytes,4,rep,name=gpg_keys,json=gpgKeys,proto3" json:"gpg_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZypperRepository) Reset()         { *m = ZypperRepository{} }
func (m *ZypperRepository) String() string { return proto.CompactTextString(m) }
func (*ZypperRepository) ProtoMessage()    {}
func (*ZypperRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{5}
}

func (m *ZypperRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZypperRepository.Unmarshal(m, b)
}
func (m *ZypperRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZypperRepository.Marshal(b, m, deterministic)
}
func (m *ZypperRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZypperRepository.Merge(m, src)
}
func (m *ZypperRepository) XXX_Size() int {
	return xxx_messageInfo_ZypperRepository.Size(m)
}
func (m *ZypperRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_ZypperRepository.DiscardUnknown(m)
}

var xxx_messageInfo_ZypperRepository proto.InternalMessageInfo

func (m *ZypperRepository) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ZypperRepository) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ZypperRepository) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *ZypperRepository) GetGpgKeys() []string {
	if m != nil {
		return m.GpgKeys
	}
	return nil
}

// Represents a Goo package repository. These will be added to a repo file
// that will be managed at C:/ProgramData/GooGet/repos/google_osconfig.repo.
type GooRepository struct {
	// Required. The name of the repository.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The url of the repository.
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GooRepository) Reset()         { *m = GooRepository{} }
func (m *GooRepository) String() string { return proto.CompactTextString(m) }
func (*GooRepository) ProtoMessage()    {}
func (*GooRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{6}
}

func (m *GooRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GooRepository.Unmarshal(m, b)
}
func (m *GooRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GooRepository.Marshal(b, m, deterministic)
}
func (m *GooRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GooRepository.Merge(m, src)
}
func (m *GooRepository) XXX_Size() int {
	return xxx_messageInfo_GooRepository.Size(m)
}
func (m *GooRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_GooRepository.DiscardUnknown(m)
}

var xxx_messageInfo_GooRepository proto.InternalMessageInfo

func (m *GooRepository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GooRepository) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// A package repository.
type PackageRepository struct {
	// A specific type of repository.
	//
	// Types that are valid to be assigned to Repository:
	//	*PackageRepository_Apt
	//	*PackageRepository_Yum
	//	*PackageRepository_Zypper
	//	*PackageRepository_Goo
	Repository           isPackageRepository_Repository `protobuf_oneof:"repository"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PackageRepository) Reset()         { *m = PackageRepository{} }
func (m *PackageRepository) String() string { return proto.CompactTextString(m) }
func (*PackageRepository) ProtoMessage()    {}
func (*PackageRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{7}
}

func (m *PackageRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageRepository.Unmarshal(m, b)
}
func (m *PackageRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageRepository.Marshal(b, m, deterministic)
}
func (m *PackageRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageRepository.Merge(m, src)
}
func (m *PackageRepository) XXX_Size() int {
	return xxx_messageInfo_PackageRepository.Size(m)
}
func (m *PackageRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageRepository.DiscardUnknown(m)
}

var xxx_messageInfo_PackageRepository proto.InternalMessageInfo

type isPackageRepository_Repository interface {
	isPackageRepository_Repository()
}

type PackageRepository_Apt struct {
	Apt *AptRepository `protobuf:"bytes,1,opt,name=apt,proto3,oneof"`
}

type PackageRepository_Yum struct {
	Yum *YumRepository `protobuf:"bytes,2,opt,name=yum,proto3,oneof"`
}

type PackageRepository_Zypper struct {
	Zypper *ZypperRepository `protobuf:"bytes,3,opt,name=zypper,proto3,oneof"`
}

type PackageRepository_Goo struct {
	Goo *GooRepository `protobuf:"bytes,4,opt,name=goo,proto3,oneof"`
}

func (*PackageRepository_Apt) isPackageRepository_Repository() {}

func (*PackageRepository_Yum) isPackageRepository_Repository() {}

func (*PackageRepository_Zypper) isPackageRepository_Repository() {}

func (*PackageRepository_Goo) isPackageRepository_Repository() {}

func (m *PackageRepository) GetRepository() isPackageRepository_Repository {
	if m != nil {
		return m.Repository
	}
	return nil
}

func (m *PackageRepository) GetApt() *AptRepository {
	if x, ok := m.GetRepository().(*PackageRepository_Apt); ok {
		return x.Apt
	}
	return nil
}

func (m *PackageRepository) GetYum() *YumRepository {
	if x, ok := m.GetRepository().(*PackageRepository_Yum); ok {
		return x.Yum
	}
	return nil
}

func (m *PackageRepository) GetZypper() *ZypperRepository {
	if x, ok := m.GetRepository().(*PackageRepository_Zypper); ok {
		return x.Zypper
	}
	return nil
}

func (m *PackageRepository) GetGoo() *GooRepository {
	if x, ok := m.GetRepository().(*PackageRepository_Goo); ok {
		return x.Goo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PackageRepository) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PackageRepository_Apt)(nil),
		(*PackageRepository_Yum)(nil),
		(*PackageRepository_Zypper)(nil),
		(*PackageRepository_Goo)(nil),
	}
}

// A software recipe is a set of instructions for installing and configuring a
// piece of software. It consists of a set of artifacts that will be
// downloaded and a set of steps that install, configure, and/or update th
// software.
//
// Recipes supports installing and updating software from artifacts in the
// following formats:
// Zip archive, Tar archive, Windows MSI, Debian package, and RPM package.
//
// Additionally it supports executing a script (either defined in a file or
// directly in this api) in bash, sh, cmd, and powershell.
//
// Updating a Software Recipe
//
// If a recipe is assigned to an instance and there is a recipe with the same
// name but a lower version already installed on the instance and the state
// of the recipe is INSTALLED_KEEP_UPDATED then the recipe will be updated to
// the new version.
//
// Script Working Directories
//
// Each script or exec step will be run in its own temporary directory which
// is deleted after completing the step.
type SoftwareRecipe struct {
	// Unique identifier for the recipe. Only one recipe with a given name will
	// be installed on an instance.
	//
	// Names are also used to identify resource to determine whether guest
	// policies conflict. This means that requests to create multiple recipes
	// with the same name and version that could possibly have conflicting
	// assignments will be rejected.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of this software recipe. Version can be up to 4 period
	// separated numbers (e.g. 12.34.56.78).
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Resources available to be used in the steps in the recipe.
	Artifacts []*SoftwareRecipe_Artifact `protobuf:"bytes,3,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// Actions to be taken for installing this recipe. On failure it will stop
	// executing steps and not attempt another installation. Any steps taken
	// (including partially completed steps) will not be rolled back.
	InstallSteps []*SoftwareRecipe_Step `protobuf:"bytes,4,rep,name=install_steps,json=installSteps,proto3" json:"install_steps,omitempty"`
	// Actions to be taken for updating this recipe. On failure it will stop
	// executing steps and not attempt another update for this recipe. Any steps
	// taken (including partially completed steps) will not be rolled back.
	UpdateSteps []*SoftwareRecipe_Step `protobuf:"bytes,5,rep,name=update_steps,json=updateSteps,proto3" json:"update_steps,omitempty"`
	// Default is INSTALLED. The desired state the agent should maintain for this
	// recipe.
	//
	// INSTALLED: The software recipe will be installed on the instance but
	//            won't be updated to new versions.
	// INSTALLED_KEEP_UPDATED: The software recipe will be installed on the
	//                         instance. It will also be updated to a higher
	//                         version of the recipe if a higher version is
	//                         assigned to this instance.
	// REMOVE: Remove is unsupported for software recipes and attempts to
	//         create or update a recipe to the REMOVE state will be rejected.
	DesiredState         DesiredState `protobuf:"varint,6,opt,name=desired_state,json=desiredState,proto3,enum=google.cloud.osconfig.v1alpha2.DesiredState" json:"desired_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SoftwareRecipe) Reset()         { *m = SoftwareRecipe{} }
func (m *SoftwareRecipe) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe) ProtoMessage()    {}
func (*SoftwareRecipe) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8}
}

func (m *SoftwareRecipe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe.Unmarshal(m, b)
}
func (m *SoftwareRecipe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe.Merge(m, src)
}
func (m *SoftwareRecipe) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe.Size(m)
}
func (m *SoftwareRecipe) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe proto.InternalMessageInfo

func (m *SoftwareRecipe) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SoftwareRecipe) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SoftwareRecipe) GetArtifacts() []*SoftwareRecipe_Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func (m *SoftwareRecipe) GetInstallSteps() []*SoftwareRecipe_Step {
	if m != nil {
		return m.InstallSteps
	}
	return nil
}

func (m *SoftwareRecipe) GetUpdateSteps() []*SoftwareRecipe_Step {
	if m != nil {
		return m.UpdateSteps
	}
	return nil
}

func (m *SoftwareRecipe) GetDesiredState() DesiredState {
	if m != nil {
		return m.DesiredState
	}
	return DesiredState_DESIRED_STATE_UNSPECIFIED
}

// Specifies a resource to be used in the recipe.
type SoftwareRecipe_Artifact struct {
	// Id of the artifact, which the installation and update steps of this
	// recipe can reference. Artifacts in a recipe cannot have the same id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URI from which to fetch the object. It should contain both the protocol
	// and path following the format {protocol}://{location}.
	//
	// The format of the location varies based on the specied protocol but it
	// must contain all the information required to successfully retrieve the
	// intended object. This means that, for example, if you need to retrieve
	// a specific version of an object in GCS the version needs to be
	// specified as part of the uri.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// Defaults to false. If false it will verify that the downloaded artifact
	// is the artifact that this recipe expects. The checks it makes are
	// dependent on the protocol for the artifact:
	// https: The file will be verified that it matches the checksum.
	// http:  This protocol is disabled if allow_insecure is false. Use https
	//        instead.
	// gcs:   A version will need to be specified as part of the uri.
	AllowInsecure bool `protobuf:"varint,3,opt,name=allow_insecure,json=allowInsecure,proto3" json:"allow_insecure,omitempty"`
	// Optional if allow_insecure is true or if the protocol is gcs://.
	// SHA256 checksum to compare to the checksum of the artifact. If the
	// checksum is not empty and it doesn't match the artifact then the recipe
	// installation will fail before running any of the steps.
	Checksum             string   `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoftwareRecipe_Artifact) Reset()         { *m = SoftwareRecipe_Artifact{} }
func (m *SoftwareRecipe_Artifact) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe_Artifact) ProtoMessage()    {}
func (*SoftwareRecipe_Artifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 0}
}

func (m *SoftwareRecipe_Artifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe_Artifact.Unmarshal(m, b)
}
func (m *SoftwareRecipe_Artifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe_Artifact.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe_Artifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe_Artifact.Merge(m, src)
}
func (m *SoftwareRecipe_Artifact) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe_Artifact.Size(m)
}
func (m *SoftwareRecipe_Artifact) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe_Artifact.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe_Artifact proto.InternalMessageInfo

func (m *SoftwareRecipe_Artifact) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SoftwareRecipe_Artifact) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *SoftwareRecipe_Artifact) GetAllowInsecure() bool {
	if m != nil {
		return m.AllowInsecure
	}
	return false
}

func (m *SoftwareRecipe_Artifact) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

// An action that can be taken as part of installing or updating a recipe.
type SoftwareRecipe_Step struct {
	// A specific type of step.
	//
	// Types that are valid to be assigned to Step:
	//	*SoftwareRecipe_Step_FileCopy
	//	*SoftwareRecipe_Step_ArchiveExtraction
	//	*SoftwareRecipe_Step_MsiInstallation
	//	*SoftwareRecipe_Step_DpkgInstallation
	//	*SoftwareRecipe_Step_RpmInstallation
	//	*SoftwareRecipe_Step_FileExec
	//	*SoftwareRecipe_Step_ScriptRun
	Step                 isSoftwareRecipe_Step_Step `protobuf_oneof:"step"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SoftwareRecipe_Step) Reset()         { *m = SoftwareRecipe_Step{} }
func (m *SoftwareRecipe_Step) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe_Step) ProtoMessage()    {}
func (*SoftwareRecipe_Step) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1}
}

func (m *SoftwareRecipe_Step) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe_Step.Unmarshal(m, b)
}
func (m *SoftwareRecipe_Step) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe_Step.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe_Step) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe_Step.Merge(m, src)
}
func (m *SoftwareRecipe_Step) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe_Step.Size(m)
}
func (m *SoftwareRecipe_Step) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe_Step.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe_Step proto.InternalMessageInfo

type isSoftwareRecipe_Step_Step interface {
	isSoftwareRecipe_Step_Step()
}

type SoftwareRecipe_Step_FileCopy struct {
	FileCopy *SoftwareRecipe_Step_CopyFile `protobuf:"bytes,1,opt,name=file_copy,json=fileCopy,proto3,oneof"`
}

type SoftwareRecipe_Step_ArchiveExtraction struct {
	ArchiveExtraction *SoftwareRecipe_Step_ExtractArchive `protobuf:"bytes,2,opt,name=archive_extraction,json=archiveExtraction,proto3,oneof"`
}

type SoftwareRecipe_Step_MsiInstallation struct {
	MsiInstallation *SoftwareRecipe_Step_InstallMsi `protobuf:"bytes,3,opt,name=msi_installation,json=msiInstallation,proto3,oneof"`
}

type SoftwareRecipe_Step_DpkgInstallation struct {
	DpkgInstallation *SoftwareRecipe_Step_InstallDpkg `protobuf:"bytes,4,opt,name=dpkg_installation,json=dpkgInstallation,proto3,oneof"`
}

type SoftwareRecipe_Step_RpmInstallation struct {
	RpmInstallation *SoftwareRecipe_Step_InstallRpm `protobuf:"bytes,5,opt,name=rpm_installation,json=rpmInstallation,proto3,oneof"`
}

type SoftwareRecipe_Step_FileExec struct {
	FileExec *SoftwareRecipe_Step_ExecFile `protobuf:"bytes,6,opt,name=file_exec,json=fileExec,proto3,oneof"`
}

type SoftwareRecipe_Step_ScriptRun struct {
	ScriptRun *SoftwareRecipe_Step_RunScript `protobuf:"bytes,7,opt,name=script_run,json=scriptRun,proto3,oneof"`
}

func (*SoftwareRecipe_Step_FileCopy) isSoftwareRecipe_Step_Step() {}

func (*SoftwareRecipe_Step_ArchiveExtraction) isSoftwareRecipe_Step_Step() {}

func (*SoftwareRecipe_Step_MsiInstallation) isSoftwareRecipe_Step_Step() {}

func (*SoftwareRecipe_Step_DpkgInstallation) isSoftwareRecipe_Step_Step() {}

func (*SoftwareRecipe_Step_RpmInstallation) isSoftwareRecipe_Step_Step() {}

func (*SoftwareRecipe_Step_FileExec) isSoftwareRecipe_Step_Step() {}

func (*SoftwareRecipe_Step_ScriptRun) isSoftwareRecipe_Step_Step() {}

func (m *SoftwareRecipe_Step) GetStep() isSoftwareRecipe_Step_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *SoftwareRecipe_Step) GetFileCopy() *SoftwareRecipe_Step_CopyFile {
	if x, ok := m.GetStep().(*SoftwareRecipe_Step_FileCopy); ok {
		return x.FileCopy
	}
	return nil
}

func (m *SoftwareRecipe_Step) GetArchiveExtraction() *SoftwareRecipe_Step_ExtractArchive {
	if x, ok := m.GetStep().(*SoftwareRecipe_Step_ArchiveExtraction); ok {
		return x.ArchiveExtraction
	}
	return nil
}

func (m *SoftwareRecipe_Step) GetMsiInstallation() *SoftwareRecipe_Step_InstallMsi {
	if x, ok := m.GetStep().(*SoftwareRecipe_Step_MsiInstallation); ok {
		return x.MsiInstallation
	}
	return nil
}

func (m *SoftwareRecipe_Step) GetDpkgInstallation() *SoftwareRecipe_Step_InstallDpkg {
	if x, ok := m.GetStep().(*SoftwareRecipe_Step_DpkgInstallation); ok {
		return x.DpkgInstallation
	}
	return nil
}

func (m *SoftwareRecipe_Step) GetRpmInstallation() *SoftwareRecipe_Step_InstallRpm {
	if x, ok := m.GetStep().(*SoftwareRecipe_Step_RpmInstallation); ok {
		return x.RpmInstallation
	}
	return nil
}

func (m *SoftwareRecipe_Step) GetFileExec() *SoftwareRecipe_Step_ExecFile {
	if x, ok := m.GetStep().(*SoftwareRecipe_Step_FileExec); ok {
		return x.FileExec
	}
	return nil
}

func (m *SoftwareRecipe_Step) GetScriptRun() *SoftwareRecipe_Step_RunScript {
	if x, ok := m.GetStep().(*SoftwareRecipe_Step_ScriptRun); ok {
		return x.ScriptRun
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SoftwareRecipe_Step) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SoftwareRecipe_Step_FileCopy)(nil),
		(*SoftwareRecipe_Step_ArchiveExtraction)(nil),
		(*SoftwareRecipe_Step_MsiInstallation)(nil),
		(*SoftwareRecipe_Step_DpkgInstallation)(nil),
		(*SoftwareRecipe_Step_RpmInstallation)(nil),
		(*SoftwareRecipe_Step_FileExec)(nil),
		(*SoftwareRecipe_Step_ScriptRun)(nil),
	}
}

// Copies the artifact to the specified path on the instance.
type SoftwareRecipe_Step_CopyFile struct {
	// The id of the relevant artifact in the recipe.
	ArtifactId string `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// The absolute path on the instance to put the file.
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Whether to allow this step to overwrite existing files. If this is
	// false and the file already exists the file will not be overwritten
	// and the step will be considered a success. Defaults to false.
	Overwrite bool `protobuf:"varint,3,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	// Consists of three octal digits which represent, in
	// order, the permissions of the owner, group, and other users for the
	// file (similarly to the numeric mode used in the linux chmod utility).
	// Each digit represents a three bit number with the 4 bit
	// corresponding to the read permissions, the 2 bit corresponds to the
	// write bit, and the one bit corresponds to the execute permission.
	// Default behavior is 755.
	//
	// Below are some examples of permissions and their associated values:
	// read, write, and execute: 7
	// read and execute: 5
	// read and write: 6
	// read only: 4
	Permissions          string   `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoftwareRecipe_Step_CopyFile) Reset()         { *m = SoftwareRecipe_Step_CopyFile{} }
func (m *SoftwareRecipe_Step_CopyFile) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe_Step_CopyFile) ProtoMessage()    {}
func (*SoftwareRecipe_Step_CopyFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1, 0}
}

func (m *SoftwareRecipe_Step_CopyFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe_Step_CopyFile.Unmarshal(m, b)
}
func (m *SoftwareRecipe_Step_CopyFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe_Step_CopyFile.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe_Step_CopyFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe_Step_CopyFile.Merge(m, src)
}
func (m *SoftwareRecipe_Step_CopyFile) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe_Step_CopyFile.Size(m)
}
func (m *SoftwareRecipe_Step_CopyFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe_Step_CopyFile.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe_Step_CopyFile proto.InternalMessageInfo

func (m *SoftwareRecipe_Step_CopyFile) GetArtifactId() string {
	if m != nil {
		return m.ArtifactId
	}
	return ""
}

func (m *SoftwareRecipe_Step_CopyFile) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *SoftwareRecipe_Step_CopyFile) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

func (m *SoftwareRecipe_Step_CopyFile) GetPermissions() string {
	if m != nil {
		return m.Permissions
	}
	return ""
}

// Extracts an archive of the type specified in the specified directory.
type SoftwareRecipe_Step_ExtractArchive struct {
	// The id of the relevant artifact in the recipe.
	ArtifactId string `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// Directory to extract archive to.
	// Defaults to / on Linux or C:\ on Windows.
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// The type of the archive to extract.
	Type                 SoftwareRecipe_Step_ExtractArchive_ArchiveType `protobuf:"varint,3,opt,name=type,proto3,enum=google.cloud.osconfig.v1alpha2.SoftwareRecipe_Step_ExtractArchive_ArchiveType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *SoftwareRecipe_Step_ExtractArchive) Reset()         { *m = SoftwareRecipe_Step_ExtractArchive{} }
func (m *SoftwareRecipe_Step_ExtractArchive) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe_Step_ExtractArchive) ProtoMessage()    {}
func (*SoftwareRecipe_Step_ExtractArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1, 1}
}

func (m *SoftwareRecipe_Step_ExtractArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe_Step_ExtractArchive.Unmarshal(m, b)
}
func (m *SoftwareRecipe_Step_ExtractArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe_Step_ExtractArchive.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe_Step_ExtractArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe_Step_ExtractArchive.Merge(m, src)
}
func (m *SoftwareRecipe_Step_ExtractArchive) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe_Step_ExtractArchive.Size(m)
}
func (m *SoftwareRecipe_Step_ExtractArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe_Step_ExtractArchive.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe_Step_ExtractArchive proto.InternalMessageInfo

func (m *SoftwareRecipe_Step_ExtractArchive) GetArtifactId() string {
	if m != nil {
		return m.ArtifactId
	}
	return ""
}

func (m *SoftwareRecipe_Step_ExtractArchive) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *SoftwareRecipe_Step_ExtractArchive) GetType() SoftwareRecipe_Step_ExtractArchive_ArchiveType {
	if m != nil {
		return m.Type
	}
	return SoftwareRecipe_Step_ExtractArchive_ARCHIVE_TYPE_UNSPECIFIED
}

// Installs an MSI file.
type SoftwareRecipe_Step_InstallMsi struct {
	// The id of the relevant artifact in the recipe.
	ArtifactId string `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// The flags to use when installing the MSI
	// defaults to ["/i"] (i.e. the install flag).
	Flags []string `protobuf:"bytes,2,rep,name=flags,proto3" json:"flags,omitempty"`
	// Return codes that indicate that the software installed or updated
	// successfully. Behaviour defaults to [0]
	AllowedExitCodes     []int32  `protobuf:"varint,3,rep,packed,name=allowed_exit_codes,json=allowedExitCodes,proto3" json:"allowed_exit_codes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoftwareRecipe_Step_InstallMsi) Reset()         { *m = SoftwareRecipe_Step_InstallMsi{} }
func (m *SoftwareRecipe_Step_InstallMsi) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe_Step_InstallMsi) ProtoMessage()    {}
func (*SoftwareRecipe_Step_InstallMsi) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1, 2}
}

func (m *SoftwareRecipe_Step_InstallMsi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe_Step_InstallMsi.Unmarshal(m, b)
}
func (m *SoftwareRecipe_Step_InstallMsi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe_Step_InstallMsi.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe_Step_InstallMsi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe_Step_InstallMsi.Merge(m, src)
}
func (m *SoftwareRecipe_Step_InstallMsi) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe_Step_InstallMsi.Size(m)
}
func (m *SoftwareRecipe_Step_InstallMsi) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe_Step_InstallMsi.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe_Step_InstallMsi proto.InternalMessageInfo

func (m *SoftwareRecipe_Step_InstallMsi) GetArtifactId() string {
	if m != nil {
		return m.ArtifactId
	}
	return ""
}

func (m *SoftwareRecipe_Step_InstallMsi) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *SoftwareRecipe_Step_InstallMsi) GetAllowedExitCodes() []int32 {
	if m != nil {
		return m.AllowedExitCodes
	}
	return nil
}

// Installs a deb via dpkg.
type SoftwareRecipe_Step_InstallDpkg struct {
	// The id of the relevant artifact in the recipe.
	ArtifactId           string   `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoftwareRecipe_Step_InstallDpkg) Reset()         { *m = SoftwareRecipe_Step_InstallDpkg{} }
func (m *SoftwareRecipe_Step_InstallDpkg) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe_Step_InstallDpkg) ProtoMessage()    {}
func (*SoftwareRecipe_Step_InstallDpkg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1, 3}
}

func (m *SoftwareRecipe_Step_InstallDpkg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe_Step_InstallDpkg.Unmarshal(m, b)
}
func (m *SoftwareRecipe_Step_InstallDpkg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe_Step_InstallDpkg.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe_Step_InstallDpkg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe_Step_InstallDpkg.Merge(m, src)
}
func (m *SoftwareRecipe_Step_InstallDpkg) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe_Step_InstallDpkg.Size(m)
}
func (m *SoftwareRecipe_Step_InstallDpkg) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe_Step_InstallDpkg.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe_Step_InstallDpkg proto.InternalMessageInfo

func (m *SoftwareRecipe_Step_InstallDpkg) GetArtifactId() string {
	if m != nil {
		return m.ArtifactId
	}
	return ""
}

// Installs an rpm file via the rpm utility.
type SoftwareRecipe_Step_InstallRpm struct {
	// The id of the relevant artifact in the recipe.
	ArtifactId           string   `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoftwareRecipe_Step_InstallRpm) Reset()         { *m = SoftwareRecipe_Step_InstallRpm{} }
func (m *SoftwareRecipe_Step_InstallRpm) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe_Step_InstallRpm) ProtoMessage()    {}
func (*SoftwareRecipe_Step_InstallRpm) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1, 4}
}

func (m *SoftwareRecipe_Step_InstallRpm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe_Step_InstallRpm.Unmarshal(m, b)
}
func (m *SoftwareRecipe_Step_InstallRpm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe_Step_InstallRpm.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe_Step_InstallRpm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe_Step_InstallRpm.Merge(m, src)
}
func (m *SoftwareRecipe_Step_InstallRpm) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe_Step_InstallRpm.Size(m)
}
func (m *SoftwareRecipe_Step_InstallRpm) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe_Step_InstallRpm.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe_Step_InstallRpm proto.InternalMessageInfo

func (m *SoftwareRecipe_Step_InstallRpm) GetArtifactId() string {
	if m != nil {
		return m.ArtifactId
	}
	return ""
}

// Executes an artifact or local file.
type SoftwareRecipe_Step_ExecFile struct {
	// Location of the file to execute.
	//
	// Types that are valid to be assigned to LocationType:
	//	*SoftwareRecipe_Step_ExecFile_ArtifactId
	//	*SoftwareRecipe_Step_ExecFile_LocalPath
	LocationType isSoftwareRecipe_Step_ExecFile_LocationType `protobuf_oneof:"location_type"`
	// Arguments to be passed to the provided executable.
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Defaults to [0]. A list of possible return values that the program
	// can return to indicate a success.
	AllowedExitCodes     []int32  `protobuf:"varint,4,rep,packed,name=allowed_exit_codes,json=allowedExitCodes,proto3" json:"allowed_exit_codes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoftwareRecipe_Step_ExecFile) Reset()         { *m = SoftwareRecipe_Step_ExecFile{} }
func (m *SoftwareRecipe_Step_ExecFile) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe_Step_ExecFile) ProtoMessage()    {}
func (*SoftwareRecipe_Step_ExecFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1, 5}
}

func (m *SoftwareRecipe_Step_ExecFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe_Step_ExecFile.Unmarshal(m, b)
}
func (m *SoftwareRecipe_Step_ExecFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe_Step_ExecFile.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe_Step_ExecFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe_Step_ExecFile.Merge(m, src)
}
func (m *SoftwareRecipe_Step_ExecFile) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe_Step_ExecFile.Size(m)
}
func (m *SoftwareRecipe_Step_ExecFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe_Step_ExecFile.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe_Step_ExecFile proto.InternalMessageInfo

type isSoftwareRecipe_Step_ExecFile_LocationType interface {
	isSoftwareRecipe_Step_ExecFile_LocationType()
}

type SoftwareRecipe_Step_ExecFile_ArtifactId struct {
	ArtifactId string `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3,oneof"`
}

type SoftwareRecipe_Step_ExecFile_LocalPath struct {
	LocalPath string `protobuf:"bytes,2,opt,name=local_path,json=localPath,proto3,oneof"`
}

func (*SoftwareRecipe_Step_ExecFile_ArtifactId) isSoftwareRecipe_Step_ExecFile_LocationType() {}

func (*SoftwareRecipe_Step_ExecFile_LocalPath) isSoftwareRecipe_Step_ExecFile_LocationType() {}

func (m *SoftwareRecipe_Step_ExecFile) GetLocationType() isSoftwareRecipe_Step_ExecFile_LocationType {
	if m != nil {
		return m.LocationType
	}
	return nil
}

func (m *SoftwareRecipe_Step_ExecFile) GetArtifactId() string {
	if x, ok := m.GetLocationType().(*SoftwareRecipe_Step_ExecFile_ArtifactId); ok {
		return x.ArtifactId
	}
	return ""
}

func (m *SoftwareRecipe_Step_ExecFile) GetLocalPath() string {
	if x, ok := m.GetLocationType().(*SoftwareRecipe_Step_ExecFile_LocalPath); ok {
		return x.LocalPath
	}
	return ""
}

func (m *SoftwareRecipe_Step_ExecFile) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *SoftwareRecipe_Step_ExecFile) GetAllowedExitCodes() []int32 {
	if m != nil {
		return m.AllowedExitCodes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SoftwareRecipe_Step_ExecFile) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SoftwareRecipe_Step_ExecFile_ArtifactId)(nil),
		(*SoftwareRecipe_Step_ExecFile_LocalPath)(nil),
	}
}

// Runs a script through an interpreter.
type SoftwareRecipe_Step_RunScript struct {
	// The shell script to be executed.
	Script string `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	// Arguments to be passed to the provided script.
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// Return codes that indicate that the software installed or updated
	// successfully. Behaviour defaults to [0]
	AllowedExitCodes []int32 `protobuf:"varint,3,rep,packed,name=allowed_exit_codes,json=allowedExitCodes,proto3" json:"allowed_exit_codes,omitempty"`
	// The script interpreter to use to run the script. If no interpreter is
	// specified the script will be executed directly, which will likely
	// only succeed for scripts with shebang lines.
	// [Wikipedia shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)).
	Interpreter          SoftwareRecipe_Step_RunScript_Interpreter `protobuf:"varint,4,opt,name=interpreter,proto3,enum=google.cloud.osconfig.v1alpha2.SoftwareRecipe_Step_RunScript_Interpreter" json:"interpreter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *SoftwareRecipe_Step_RunScript) Reset()         { *m = SoftwareRecipe_Step_RunScript{} }
func (m *SoftwareRecipe_Step_RunScript) String() string { return proto.CompactTextString(m) }
func (*SoftwareRecipe_Step_RunScript) ProtoMessage()    {}
func (*SoftwareRecipe_Step_RunScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{8, 1, 6}
}

func (m *SoftwareRecipe_Step_RunScript) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareRecipe_Step_RunScript.Unmarshal(m, b)
}
func (m *SoftwareRecipe_Step_RunScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareRecipe_Step_RunScript.Marshal(b, m, deterministic)
}
func (m *SoftwareRecipe_Step_RunScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareRecipe_Step_RunScript.Merge(m, src)
}
func (m *SoftwareRecipe_Step_RunScript) XXX_Size() int {
	return xxx_messageInfo_SoftwareRecipe_Step_RunScript.Size(m)
}
func (m *SoftwareRecipe_Step_RunScript) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareRecipe_Step_RunScript.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareRecipe_Step_RunScript proto.InternalMessageInfo

func (m *SoftwareRecipe_Step_RunScript) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *SoftwareRecipe_Step_RunScript) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *SoftwareRecipe_Step_RunScript) GetAllowedExitCodes() []int32 {
	if m != nil {
		return m.AllowedExitCodes
	}
	return nil
}

func (m *SoftwareRecipe_Step_RunScript) GetInterpreter() SoftwareRecipe_Step_RunScript_Interpreter {
	if m != nil {
		return m.Interpreter
	}
	return SoftwareRecipe_Step_RunScript_INTERPRETER_UNSPECIFIED
}

// A request message for creating an GuestPolicy.
type CreateGuestPolicyRequest struct {
	// The resource name of the parent.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The logical name of the Guest Policy in the project
	// with the following restrictions:
	//
	// * Must contain only lowercase letters, numbers, and hyphens.
	// * Must start with a letter.
	// * Must be between 1-63 characters.
	// * Must end with a number or a letter.
	// * Must be unique within the project.
	GuestPolicyId string `protobuf:"bytes,2,opt,name=guest_policy_id,json=guestPolicyId,proto3" json:"guest_policy_id,omitempty"`
	// The GuestPolicy to create.
	GuestPolicy          *GuestPolicy `protobuf:"bytes,3,opt,name=guest_policy,json=guestPolicy,proto3" json:"guest_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateGuestPolicyRequest) Reset()         { *m = CreateGuestPolicyRequest{} }
func (m *CreateGuestPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*CreateGuestPolicyRequest) ProtoMessage()    {}
func (*CreateGuestPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{9}
}

func (m *CreateGuestPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateGuestPolicyRequest.Unmarshal(m, b)
}
func (m *CreateGuestPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateGuestPolicyRequest.Marshal(b, m, deterministic)
}
func (m *CreateGuestPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGuestPolicyRequest.Merge(m, src)
}
func (m *CreateGuestPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_CreateGuestPolicyRequest.Size(m)
}
func (m *CreateGuestPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGuestPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGuestPolicyRequest proto.InternalMessageInfo

func (m *CreateGuestPolicyRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateGuestPolicyRequest) GetGuestPolicyId() string {
	if m != nil {
		return m.GuestPolicyId
	}
	return ""
}

func (m *CreateGuestPolicyRequest) GetGuestPolicy() *GuestPolicy {
	if m != nil {
		return m.GuestPolicy
	}
	return nil
}

// A request message for retrieving a GuestPolicy.
type GetGuestPolicyRequest struct {
	// The resource name of the GuestPolicy.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGuestPolicyRequest) Reset()         { *m = GetGuestPolicyRequest{} }
func (m *GetGuestPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*GetGuestPolicyRequest) ProtoMessage()    {}
func (*GetGuestPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{10}
}

func (m *GetGuestPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGuestPolicyRequest.Unmarshal(m, b)
}
func (m *GetGuestPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGuestPolicyRequest.Marshal(b, m, deterministic)
}
func (m *GetGuestPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGuestPolicyRequest.Merge(m, src)
}
func (m *GetGuestPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_GetGuestPolicyRequest.Size(m)
}
func (m *GetGuestPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGuestPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGuestPolicyRequest proto.InternalMessageInfo

func (m *GetGuestPolicyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A request message for listing GuestPolicies.
type ListGuestPoliciesRequest struct {
	// The resource name of the parent.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of GuestPolicies to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A pagination token returned from a previous call to ListGuestPolicies
	// that indicates where this listing should continue from.
	// This field is optional.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGuestPoliciesRequest) Reset()         { *m = ListGuestPoliciesRequest{} }
func (m *ListGuestPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListGuestPoliciesRequest) ProtoMessage()    {}
func (*ListGuestPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{11}
}

func (m *ListGuestPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGuestPoliciesRequest.Unmarshal(m, b)
}
func (m *ListGuestPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGuestPoliciesRequest.Marshal(b, m, deterministic)
}
func (m *ListGuestPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGuestPoliciesRequest.Merge(m, src)
}
func (m *ListGuestPoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_ListGuestPoliciesRequest.Size(m)
}
func (m *ListGuestPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGuestPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListGuestPoliciesRequest proto.InternalMessageInfo

func (m *ListGuestPoliciesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListGuestPoliciesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListGuestPoliciesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// A response message for listing GuestPolicies.
type ListGuestPoliciesResponse struct {
	// The list of GuestPolicies.
	GuestPolicies []*GuestPolicy `protobuf:"bytes,1,rep,name=guest_policies,json=guestPolicies,proto3" json:"guest_policies,omitempty"`
	// A pagination token that can be used to get the next page
	// of GuestPolicies.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGuestPoliciesResponse) Reset()         { *m = ListGuestPoliciesResponse{} }
func (m *ListGuestPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*ListGuestPoliciesResponse) ProtoMessage()    {}
func (*ListGuestPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{12}
}

func (m *ListGuestPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGuestPoliciesResponse.Unmarshal(m, b)
}
func (m *ListGuestPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGuestPoliciesResponse.Marshal(b, m, deterministic)
}
func (m *ListGuestPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGuestPoliciesResponse.Merge(m, src)
}
func (m *ListGuestPoliciesResponse) XXX_Size() int {
	return xxx_messageInfo_ListGuestPoliciesResponse.Size(m)
}
func (m *ListGuestPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGuestPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListGuestPoliciesResponse proto.InternalMessageInfo

func (m *ListGuestPoliciesResponse) GetGuestPolicies() []*GuestPolicy {
	if m != nil {
		return m.GuestPolicies
	}
	return nil
}

func (m *ListGuestPoliciesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// A request message for updating a GuestPolicy.
type UpdateGuestPolicyRequest struct {
	// The updated GuestPolicy.
	GuestPolicy *GuestPolicy `protobuf:"bytes,1,opt,name=guest_policy,json=guestPolicy,proto3" json:"guest_policy,omitempty"`
	// Field mask that controls which fields of the GuestPolicy should be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateGuestPolicyRequest) Reset()         { *m = UpdateGuestPolicyRequest{} }
func (m *UpdateGuestPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGuestPolicyRequest) ProtoMessage()    {}
func (*UpdateGuestPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{13}
}

func (m *UpdateGuestPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateGuestPolicyRequest.Unmarshal(m, b)
}
func (m *UpdateGuestPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateGuestPolicyRequest.Marshal(b, m, deterministic)
}
func (m *UpdateGuestPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGuestPolicyRequest.Merge(m, src)
}
func (m *UpdateGuestPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateGuestPolicyRequest.Size(m)
}
func (m *UpdateGuestPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGuestPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGuestPolicyRequest proto.InternalMessageInfo

func (m *UpdateGuestPolicyRequest) GetGuestPolicy() *GuestPolicy {
	if m != nil {
		return m.GuestPolicy
	}
	return nil
}

func (m *UpdateGuestPolicyRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// A request message for deleting a GuestPolicy.
type DeleteGuestPolicyRequest struct {
	// The resource name of the GuestPolicy.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteGuestPolicyRequest) Reset()         { *m = DeleteGuestPolicyRequest{} }
func (m *DeleteGuestPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteGuestPolicyRequest) ProtoMessage()    {}
func (*DeleteGuestPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{14}
}

func (m *DeleteGuestPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteGuestPolicyRequest.Unmarshal(m, b)
}
func (m *DeleteGuestPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteGuestPolicyRequest.Marshal(b, m, deterministic)
}
func (m *DeleteGuestPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteGuestPolicyRequest.Merge(m, src)
}
func (m *DeleteGuestPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteGuestPolicyRequest.Size(m)
}
func (m *DeleteGuestPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteGuestPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteGuestPolicyRequest proto.InternalMessageInfo

func (m *DeleteGuestPolicyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A request message for getting the policies assigned to the instance.
type LookupEffectiveGuestPoliciesRequest struct {
	// The GCE VM instance whose policies are being looked up.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// This is the GCE instance identity token described in
	// https://cloud.google.com/compute/docs/instances/verifying-instance-identity
	// where the audience is 'osconfig.googleapis.com' and the format is 'full'.
	//
	// If this is not provided, the request credentials will be used
	// to authorize the request.
	InstanceIdToken string `protobuf:"bytes,2,opt,name=instance_id_token,json=instanceIdToken,proto3" json:"instance_id_token,omitempty"`
	// Short name of the OS running on the instance. The OS Config agent will only
	// provide this field for targeting if OS Inventory is enabled for that
	// instance.
	OsShortName string `protobuf:"bytes,3,opt,name=os_short_name,json=osShortName,proto3" json:"os_short_name,omitempty"`
	// Version of the OS running on the instance. The OS Config agent will only
	// provide this field for targeting if OS Inventory is enabled for that
	// instance.
	OsVersion string `protobuf:"bytes,4,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// Architecture of OS running on the instance. The OS Config agent will only
	// provide this field for targeting if OS Inventory is enabled for that
	// instance.
	OsArchitecture       string   `protobuf:"bytes,5,opt,name=os_architecture,json=osArchitecture,proto3" json:"os_architecture,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupEffectiveGuestPoliciesRequest) Reset()         { *m = LookupEffectiveGuestPoliciesRequest{} }
func (m *LookupEffectiveGuestPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*LookupEffectiveGuestPoliciesRequest) ProtoMessage()    {}
func (*LookupEffectiveGuestPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{15}
}

func (m *LookupEffectiveGuestPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesRequest.Unmarshal(m, b)
}
func (m *LookupEffectiveGuestPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesRequest.Marshal(b, m, deterministic)
}
func (m *LookupEffectiveGuestPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupEffectiveGuestPoliciesRequest.Merge(m, src)
}
func (m *LookupEffectiveGuestPoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesRequest.Size(m)
}
func (m *LookupEffectiveGuestPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupEffectiveGuestPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupEffectiveGuestPoliciesRequest proto.InternalMessageInfo

func (m *LookupEffectiveGuestPoliciesRequest) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *LookupEffectiveGuestPoliciesRequest) GetInstanceIdToken() string {
	if m != nil {
		return m.InstanceIdToken
	}
	return ""
}

func (m *LookupEffectiveGuestPoliciesRequest) GetOsShortName() string {
	if m != nil {
		return m.OsShortName
	}
	return ""
}

func (m *LookupEffectiveGuestPoliciesRequest) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *LookupEffectiveGuestPoliciesRequest) GetOsArchitecture() string {
	if m != nil {
		return m.OsArchitecture
	}
	return ""
}

// Response with policy configs assigned to the instance.
type LookupEffectiveGuestPoliciesResponse struct {
	// List of package configurations assigned to the VM
	Packages []*LookupEffectiveGuestPoliciesResponse_SourcedPackage `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
	// List of package repository configurations assigned to the VM.
	PackageRepositories  []*LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository `protobuf:"bytes,2,rep,name=package_repositories,json=packageRepositories,proto3" json:"package_repositories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *LookupEffectiveGuestPoliciesResponse) Reset()         { *m = LookupEffectiveGuestPoliciesResponse{} }
func (m *LookupEffectiveGuestPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*LookupEffectiveGuestPoliciesResponse) ProtoMessage()    {}
func (*LookupEffectiveGuestPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{16}
}

func (m *LookupEffectiveGuestPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesResponse.Unmarshal(m, b)
}
func (m *LookupEffectiveGuestPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesResponse.Marshal(b, m, deterministic)
}
func (m *LookupEffectiveGuestPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupEffectiveGuestPoliciesResponse.Merge(m, src)
}
func (m *LookupEffectiveGuestPoliciesResponse) XXX_Size() int {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesResponse.Size(m)
}
func (m *LookupEffectiveGuestPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupEffectiveGuestPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupEffectiveGuestPoliciesResponse proto.InternalMessageInfo

func (m *LookupEffectiveGuestPoliciesResponse) GetPackages() []*LookupEffectiveGuestPoliciesResponse_SourcedPackage {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *LookupEffectiveGuestPoliciesResponse) GetPackageRepositories() []*LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository {
	if m != nil {
		return m.PackageRepositories
	}
	return nil
}

// A GuestPolicy package including its source.
type LookupEffectiveGuestPoliciesResponse_SourcedPackage struct {
	// Name of the GuestPolicy providing this config.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// A software package to configure on the VM.
	Package              *Package `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackage) Reset() {
	*m = LookupEffectiveGuestPoliciesResponse_SourcedPackage{}
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackage) String() string {
	return proto.CompactTextString(m)
}
func (*LookupEffectiveGuestPoliciesResponse_SourcedPackage) ProtoMessage() {}
func (*LookupEffectiveGuestPoliciesResponse_SourcedPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{16, 0}
}

func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackage.Unmarshal(m, b)
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackage.Marshal(b, m, deterministic)
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackage.Merge(m, src)
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackage) XXX_Size() int {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackage.Size(m)
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackage.DiscardUnknown(m)
}

var xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackage proto.InternalMessageInfo

func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackage) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

// A GuestPolicy package repository including its source.
type LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository struct {
	// Name of the GuestPolicy providing this config.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// A software package repository to configure on the VM.
	PackageRepository    *PackageRepository `protobuf:"bytes,2,opt,name=package_repository,json=packageRepository,proto3" json:"package_repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) Reset() {
	*m = LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository{}
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) String() string {
	return proto.CompactTextString(m)
}
func (*LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) ProtoMessage() {}
func (*LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2c4bc1a5d158554, []int{16, 1}
}

func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository.Unmarshal(m, b)
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository.Marshal(b, m, deterministic)
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository.Merge(m, src)
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) XXX_Size() int {
	return xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository.Size(m)
}
func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository.DiscardUnknown(m)
}

var xxx_messageInfo_LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository proto.InternalMessageInfo

func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository) GetPackageRepository() *PackageRepository {
	if m != nil {
		return m.PackageRepository
	}
	return nil
}

func init() {
	proto.RegisterEnum("google.cloud.osconfig.v1alpha2.DesiredState", DesiredState_name, DesiredState_value)
	proto.RegisterEnum("google.cloud.osconfig.v1alpha2.Package_Manager", Package_Manager_name, Package_Manager_value)
	proto.RegisterEnum("google.cloud.osconfig.v1alpha2.AptRepository_ArchiveType", AptRepository_ArchiveType_name, AptRepository_ArchiveType_value)
	proto.RegisterEnum("google.cloud.osconfig.v1alpha2.SoftwareRecipe_Step_ExtractArchive_ArchiveType", SoftwareRecipe_Step_ExtractArchive_ArchiveType_name, SoftwareRecipe_Step_ExtractArchive_ArchiveType_value)
	proto.RegisterEnum("google.cloud.osconfig.v1alpha2.SoftwareRecipe_Step_RunScript_Interpreter", SoftwareRecipe_Step_RunScript_Interpreter_name, SoftwareRecipe_Step_RunScript_Interpreter_value)
	proto.RegisterType((*GuestPolicy)(nil), "google.cloud.osconfig.v1alpha2.GuestPolicy")
	proto.RegisterType((*Assignment)(nil), "google.cloud.osconfig.v1alpha2.Assignment")
	proto.RegisterType((*Assignment_GroupLabel)(nil), "google.cloud.osconfig.v1alpha2.Assignment.GroupLabel")
	proto.RegisterMapType((map[string]string)(nil), "google.cloud.osconfig.v1alpha2.Assignment.GroupLabel.LabelsEntry")
	proto.RegisterType((*Package)(nil), "google.cloud.osconfig.v1alpha2.Package")
	proto.RegisterType((*AptRepository)(nil), "google.cloud.osconfig.v1alpha2.AptRepository")
	proto.RegisterType((*YumRepository)(nil), "google.cloud.osconfig.v1alpha2.YumRepository")
	proto.RegisterType((*ZypperRepository)(nil), "google.cloud.osconfig.v1alpha2.ZypperRepository")
	proto.RegisterType((*GooRepository)(nil), "google.cloud.osconfig.v1alpha2.GooRepository")
	proto.RegisterType((*PackageRepository)(nil), "google.cloud.osconfig.v1alpha2.PackageRepository")
	proto.RegisterType((*SoftwareRecipe)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe")
	proto.RegisterType((*SoftwareRecipe_Artifact)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe.Artifact")
	proto.RegisterType((*SoftwareRecipe_Step)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe.Step")
	proto.RegisterType((*SoftwareRecipe_Step_CopyFile)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe.Step.CopyFile")
	proto.RegisterType((*SoftwareRecipe_Step_ExtractArchive)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe.Step.ExtractArchive")
	proto.RegisterType((*SoftwareRecipe_Step_InstallMsi)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe.Step.InstallMsi")
	proto.RegisterType((*SoftwareRecipe_Step_InstallDpkg)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe.Step.InstallDpkg")
	proto.RegisterType((*SoftwareRecipe_Step_InstallRpm)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe.Step.InstallRpm")
	proto.RegisterType((*SoftwareRecipe_Step_ExecFile)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe.Step.ExecFile")
	proto.RegisterType((*SoftwareRecipe_Step_RunScript)(nil), "google.cloud.osconfig.v1alpha2.SoftwareRecipe.Step.RunScript")
	proto.RegisterType((*CreateGuestPolicyRequest)(nil), "google.cloud.osconfig.v1alpha2.CreateGuestPolicyRequest")
	proto.RegisterType((*GetGuestPolicyRequest)(nil), "google.cloud.osconfig.v1alpha2.GetGuestPolicyRequest")
	proto.RegisterType((*ListGuestPoliciesRequest)(nil), "google.cloud.osconfig.v1alpha2.ListGuestPoliciesRequest")
	proto.RegisterType((*ListGuestPoliciesResponse)(nil), "google.cloud.osconfig.v1alpha2.ListGuestPoliciesResponse")
	proto.RegisterType((*UpdateGuestPolicyRequest)(nil), "google.cloud.osconfig.v1alpha2.UpdateGuestPolicyRequest")
	proto.RegisterType((*DeleteGuestPolicyRequest)(nil), "google.cloud.osconfig.v1alpha2.DeleteGuestPolicyRequest")
	proto.RegisterType((*LookupEffectiveGuestPoliciesRequest)(nil), "google.cloud.osconfig.v1alpha2.LookupEffectiveGuestPoliciesRequest")
	proto.RegisterType((*LookupEffectiveGuestPoliciesResponse)(nil), "google.cloud.osconfig.v1alpha2.LookupEffectiveGuestPoliciesResponse")
	proto.RegisterType((*LookupEffectiveGuestPoliciesResponse_SourcedPackage)(nil), "google.cloud.osconfig.v1alpha2.LookupEffectiveGuestPoliciesResponse.SourcedPackage")
	proto.RegisterType((*LookupEffectiveGuestPoliciesResponse_SourcedPackageRepository)(nil), "google.cloud.osconfig.v1alpha2.LookupEffectiveGuestPoliciesResponse.SourcedPackageRepository")
}

func init() {
	proto.RegisterFile("google/cloud/osconfig/v1alpha2/guest_policies.proto", fileDescriptor_b2c4bc1a5d158554)
}

var fileDescriptor_b2c4bc1a5d158554 = []byte{
	// 2159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xef, 0x72, 0x23, 0x47,
	0x11, 0xb7, 0x24, 0xdb, 0x92, 0x5a, 0x96, 0xbc, 0x37, 0x39, 0x92, 0x8d, 0xf2, 0xe7, 0x1c, 0x11,
	0xc8, 0x71, 0x49, 0x64, 0xa2, 0x23, 0x05, 0x21, 0x01, 0x4a, 0xb6, 0xf6, 0x2c, 0x05, 0xdb, 0x27,
	0x46, 0xf2, 0x71, 0x36, 0x7f, 0x96, 0xf5, 0x6a, 0xbc, 0x9e, 0xd2, 0x6a, 0x67, 0xb3, 0xb3, 0xf2,
	0x59, 0x97, 0x67, 0xa0, 0x8a, 0xa2, 0xa8, 0xa2, 0xf8, 0x44, 0xc1, 0x17, 0x0a, 0x8a, 0xe2, 0x23,
	0xc5, 0x13, 0xf0, 0x0e, 0x3c, 0x01, 0xaf, 0x41, 0xcd, 0xec, 0xec, 0x6a, 0x65, 0xcb, 0x27, 0x9f,
	0x0d, 0xc5, 0xb7, 0xed, 0x9e, 0xe9, 0x5f, 0xcf, 0xf4, 0x9f, 0x99, 0x9e, 0x5e, 0x78, 0xe8, 0x30,
	0xe6, 0xb8, 0x64, 0xd3, 0x76, 0xd9, 0x78, 0xb0, 0xc9, 0xb8, 0xcd, 0xbc, 0x13, 0xea, 0x6c, 0x9e,
	0x7d, 0x64, 0xb9, 0xfe, 0xa9, 0xd5, 0xd8, 0x74, 0xc6, 0x84, 0x87, 0xa6, 0xcf, 0x5c, 0x6a, 0x53,
	0xc2, 0xeb, 0x7e, 0xc0, 0x42, 0x86, 0xde, 0x8e, 0x84, 0xea, 0x52, 0xa8, 0x1e, 0x0b, 0xd5, 0x63,
	0xa1, 0xea, 0x86, 0x02, 0x95, 0xb3, 0x8f, 0xc7, 0x27, 0x9b, 0x27, 0x94, 0xb8, 0x03, 0x73, 0x64,
	0xf1, 0x61, 0x84, 0x50, 0xbd, 0x77, 0x71, 0x46, 0x48, 0x47, 0x84, 0x87, 0xd6, 0xc8, 0x8f, 0x26,
	0xd4, 0x7e, 0xbd, 0x0c, 0xa5, 0x1d, 0xa1, 0xbb, 0x2b, 0x54, 0x4f, 0x10, 0x82, 0x65, 0xcf, 0x1a,
	0x11, 0x3d, 0xb3, 0x91, 0xb9, 0x5f, 0xc4, 0xf2, 0x1b, 0x6d, 0x40, 0x69, 0x40, 0xb8, 0x1d, 0x50,
	0x3f, 0xa4, 0xcc, 0xd3, 0xb3, 0x72, 0x28, 0xcd, 0x42, 0x9f, 0x42, 0xc9, 0x0e, 0x88, 0x15, 0x12,
	0x53, 0xe0, 0xeb, 0xb9, 0x8d, 0xcc, 0xfd, 0x52, 0xa3, 0x5a, 0x57, 0xcb, 0x8f, 0x95, 0xd7, 0xfb,
	0xb1, 0x72, 0x0c, 0xd1, 0x74, 0xc1, 0x10, 0xc2, 0x63, 0x7f, 0x90, 0x08, 0x2f, 0x2f, 0x16, 0x8e,
	0xa6, 0x4b, 0xe1, 0xcf, 0x01, 0x2c, 0xce, 0xa9, 0xe3, 0x8d, 0x88, 0x17, 0xea, 0xab, 0x52, 0xf6,
	0x41, 0xfd, 0xc5, 0x76, 0xab, 0x37, 0x13, 0x09, 0x9c, 0x92, 0x46, 0xdb, 0x50, 0xf0, 0x2d, 0x7b,
	0x68, 0x39, 0x84, 0xeb, 0xf9, 0x8d, 0xdc, 0xfd, 0x52, 0xe3, 0xbd, 0x45, 0x48, 0xdd, 0x68, 0x3e,
	0x4e, 0x04, 0xd1, 0x00, 0xee, 0xaa, 0x6f, 0x33, 0x20, 0x3e, 0xe3, 0x34, 0x64, 0x01, 0x25, 0x5c,
	0x2f, 0x48, 0xc0, 0x8f, 0xae, 0x0b, 0x18, 0x8b, 0x4e, 0xf0, 0x2b, 0xfe, 0x05, 0x16, 0x25, 0x1c,
	0xb5, 0x21, 0x1f, 0x10, 0x9b, 0xfa, 0x84, 0xeb, 0x45, 0x09, 0x5c, 0x5f, 0x04, 0xdc, 0x63, 0x27,
	0xe1, 0x33, 0x2b, 0x20, 0x58, 0x8a, 0xe1, 0x58, 0x5c, 0x38, 0x9c, 0x84, 0x96, 0xa3, 0x43, 0xe4,
	0x70, 0xf1, 0x5d, 0xfb, 0x77, 0x0e, 0x60, 0x6a, 0x23, 0xf4, 0x14, 0xd6, 0x9c, 0x80, 0x8d, 0x7d,
	0xd3, 0xb5, 0x8e, 0x89, 0xcb, 0xf5, 0x8c, 0xd4, 0xf8, 0xf1, 0xf5, 0xad, 0x5c, 0xdf, 0x11, 0xe2,
	0xbb, 0x42, 0x1a, 0x97, 0x9c, 0xe4, 0x9b, 0xa3, 0xbb, 0xb0, 0xf2, 0x9c, 0x79, 0x84, 0xeb, 0xd9,
	0x8d, 0xdc, 0xfd, 0x22, 0x8e, 0x08, 0xf4, 0x26, 0x14, 0xa9, 0xc7, 0x43, 0xcb, 0xb3, 0x09, 0xd7,
	0x73, 0x72, 0x64, 0xca, 0x40, 0xdf, 0x82, 0x57, 0x63, 0xc2, 0x14, 0xe1, 0x69, 0xfa, 0x01, 0x39,
	0xa1, 0xe7, 0x84, 0xeb, 0xcb, 0x72, 0xea, 0xdd, 0x78, 0x74, 0xdf, 0x1a, 0x91, 0xae, 0x1a, 0x43,
	0xef, 0x42, 0x85, 0x71, 0x93, 0x9f, 0xb2, 0x20, 0x94, 0x52, 0x5c, 0x5f, 0x91, 0xb3, 0xd7, 0x18,
	0xef, 0x09, 0xa6, 0x98, 0xcc, 0xd1, 0x3d, 0x28, 0x31, 0x6e, 0x9e, 0x91, 0x80, 0x53, 0xe6, 0x71,
	0x7d, 0x55, 0x4e, 0x01, 0xc6, 0x9f, 0x28, 0x0e, 0xfa, 0x06, 0x68, 0x8c, 0x9b, 0x56, 0x60, 0x9f,
	0xd2, 0x90, 0xd8, 0xe1, 0x38, 0x50, 0xa1, 0x52, 0xc4, 0xeb, 0x8c, 0x37, 0xd3, 0xec, 0xea, 0x1f,
	0x33, 0x00, 0xd3, 0x7d, 0xa3, 0x43, 0x58, 0x9d, 0x31, 0x5f, 0xf3, 0x46, 0xe6, 0xab, 0x47, 0x86,
	0x33, 0xbc, 0x30, 0x98, 0x60, 0x05, 0x58, 0xfd, 0x04, 0x4a, 0x29, 0x36, 0xd2, 0x20, 0x37, 0x24,
	0x13, 0x95, 0xc1, 0xe2, 0x53, 0x98, 0xf9, 0xcc, 0x72, 0xc7, 0x44, 0xa5, 0x6e, 0x44, 0x7c, 0x37,
	0xfb, 0x9d, 0x4c, 0xed, 0xcf, 0x59, 0xc8, 0xab, 0x90, 0x9b, 0x9b, 0xfa, 0x3f, 0x82, 0xf2, 0x80,
	0x70, 0x1a, 0x90, 0x81, 0xc9, 0x43, 0x2b, 0x8c, 0x10, 0x2a, 0x8d, 0x0f, 0x16, 0x2d, 0xbe, 0x15,
	0x09, 0xf5, 0x84, 0x0c, 0x5e, 0x1b, 0xa4, 0x28, 0xd4, 0x81, 0xfc, 0xc8, 0xf2, 0x2c, 0x87, 0x04,
	0xf2, 0x9c, 0xa8, 0x34, 0x36, 0xaf, 0x99, 0x13, 0xf5, 0xbd, 0x48, 0x0c, 0xc7, 0xf2, 0x48, 0x87,
	0xbc, 0xf2, 0x95, 0x3c, 0x35, 0x8a, 0x38, 0x26, 0x6b, 0x18, 0xf2, 0x6a, 0x36, 0x7a, 0x0d, 0x5e,
	0xd9, 0x6b, 0xee, 0x37, 0x77, 0x0c, 0x6c, 0x1e, 0xec, 0xf7, 0xba, 0xc6, 0x76, 0xe7, 0x51, 0xc7,
	0x68, 0x69, 0x4b, 0x28, 0x0f, 0xb9, 0xe6, 0xfe, 0xa1, 0x96, 0x91, 0x1f, 0xdd, 0xbe, 0x96, 0x15,
	0x1f, 0x87, 0x07, 0x7b, 0x5a, 0x0e, 0x01, 0xac, 0x1e, 0x1d, 0x76, 0xbb, 0x06, 0xd6, 0x96, 0x05,
	0x73, 0xe7, 0xf1, 0x63, 0x6d, 0xa5, 0xf6, 0xfb, 0x2c, 0x94, 0x9b, 0x7e, 0x38, 0x4d, 0x4d, 0xf4,
	0x53, 0x58, 0x93, 0xa1, 0x70, 0x46, 0xcc, 0x70, 0xe2, 0x47, 0x96, 0xab, 0x34, 0x3e, 0x59, 0xe8,
	0xd9, 0x34, 0x48, 0xbd, 0x19, 0x21, 0xf4, 0x27, 0x3e, 0xc1, 0x25, 0x6b, 0x4a, 0x08, 0x3f, 0x8e,
	0x03, 0xaa, 0x7c, 0x26, 0x3e, 0x51, 0x0d, 0xd6, 0x06, 0x94, 0x87, 0x01, 0x3d, 0x1e, 0xcb, 0x93,
	0x38, 0x27, 0x87, 0x66, 0x78, 0xe8, 0x6d, 0x00, 0x9b, 0x8d, 0x7c, 0xe6, 0x11, 0x2f, 0x8c, 0x53,
	0x22, 0xc5, 0x41, 0xaf, 0x41, 0xde, 0xf1, 0x1d, 0x53, 0x44, 0xc8, 0x8a, 0x14, 0x5f, 0x75, 0x7c,
	0xe7, 0x87, 0x64, 0x52, 0x6b, 0x42, 0x29, 0xb5, 0x14, 0xf4, 0x26, 0xe8, 0x4d, 0xbc, 0xdd, 0xee,
	0x3c, 0x31, 0xcc, 0xfe, 0x61, 0xd7, 0xb8, 0x6c, 0xbb, 0x96, 0xb1, 0xa5, 0x65, 0x50, 0x09, 0xf2,
	0x2d, 0x63, 0xcb, 0xec, 0xe1, 0x6d, 0x2d, 0x5b, 0x3b, 0x87, 0xf2, 0xe1, 0x78, 0x94, 0x32, 0x50,
	0x05, 0xb2, 0x74, 0xa0, 0x02, 0x2a, 0x4b, 0x07, 0xe8, 0x1d, 0xb9, 0x01, 0xdf, 0xb5, 0x26, 0x32,
	0x09, 0x93, 0xab, 0x24, 0xe2, 0x89, 0x1c, 0x44, 0xaf, 0x43, 0xe1, 0xd8, 0xe2, 0xc4, 0x1c, 0x07,
	0xae, 0xda, 0x5f, 0x5e, 0xd0, 0x07, 0x81, 0x2b, 0x86, 0xd4, 0xd2, 0xe3, 0x8d, 0xe5, 0xa3, 0xb5,
	0xf3, 0xda, 0x97, 0xa0, 0x1d, 0x4d, 0x7c, 0x9f, 0x04, 0xff, 0x0f, 0xe5, 0x1f, 0x43, 0x79, 0x87,
	0xb1, 0x94, 0xe6, 0x79, 0x99, 0x24, 0xbd, 0xe9, 0x4e, 0xbd, 0xe9, 0xd6, 0xfe, 0x9e, 0x85, 0x3b,
	0x97, 0x8e, 0x7b, 0xd4, 0x84, 0x9c, 0xe5, 0x87, 0x52, 0xb4, 0xd4, 0xf8, 0xf0, 0xa5, 0x42, 0xa9,
	0xbd, 0x84, 0x85, 0xac, 0x80, 0x98, 0x8c, 0x47, 0x52, 0xd5, 0x35, 0x20, 0x66, 0x3c, 0x26, 0x20,
	0x26, 0xe3, 0x11, 0xfa, 0x1c, 0x56, 0x9f, 0x4b, 0x7b, 0xaa, 0xbb, 0xfc, 0x9b, 0x8b, 0x50, 0x2e,
	0x5a, 0xbf, 0xbd, 0x84, 0x15, 0x82, 0x58, 0x8e, 0xc3, 0x98, 0xba, 0xd7, 0x17, 0x2e, 0x67, 0xc6,
	0x92, 0x62, 0x39, 0x0e, 0x63, 0x5b, 0x6b, 0x00, 0xc9, 0x65, 0x3a, 0xa9, 0xfd, 0x13, 0x41, 0x65,
	0xf6, 0x3a, 0x9b, 0x6b, 0xf1, 0xd4, 0xe9, 0x90, 0x9d, 0x39, 0x1d, 0xd0, 0x01, 0x14, 0xad, 0x20,
	0xa4, 0x27, 0x96, 0x1d, 0x46, 0x17, 0x4c, 0xa9, 0xf1, 0xed, 0x97, 0xbb, 0x3f, 0xeb, 0x4d, 0x25,
	0x8f, 0xa7, 0x48, 0xe8, 0x29, 0x94, 0xe5, 0xdd, 0xe3, 0xba, 0x26, 0x0f, 0x89, 0x1f, 0xc5, 0x49,
	0xa9, 0xf1, 0xf0, 0x25, 0xa1, 0x7b, 0x21, 0xf1, 0xf1, 0x9a, 0x42, 0x12, 0x04, 0x47, 0x4f, 0x60,
	0x4d, 0x95, 0x48, 0x11, 0xf0, 0xca, 0xcd, 0x81, 0x55, 0xad, 0x15, 0xe1, 0x5e, 0x3a, 0xde, 0x57,
	0x6f, 0x7b, 0xbc, 0x57, 0x19, 0x14, 0x62, 0xdb, 0x5c, 0xca, 0xc0, 0xcb, 0x27, 0xda, 0xd7, 0xa0,
	0x62, 0xb9, 0x2e, 0x7b, 0x66, 0x52, 0x8f, 0x13, 0x7b, 0x1c, 0x44, 0xb5, 0x63, 0x01, 0x97, 0x25,
	0xb7, 0xa3, 0x98, 0xa8, 0x0a, 0x05, 0xfb, 0x94, 0xd8, 0x43, 0x3e, 0x1e, 0xa9, 0x93, 0x3e, 0xa1,
	0xab, 0xff, 0xa8, 0xc0, 0xb2, 0xd8, 0x0d, 0xfa, 0x09, 0x14, 0x4f, 0xa8, 0x4b, 0x4c, 0x9b, 0xf9,
	0x13, 0x95, 0x3f, 0x9f, 0xdd, 0xc0, 0x42, 0xf5, 0x6d, 0xe6, 0x4f, 0x1e, 0x51, 0x97, 0xb4, 0x97,
	0x70, 0x41, 0x00, 0x0a, 0x1a, 0x71, 0x40, 0xf1, 0x51, 0x4f, 0xce, 0xc3, 0xc0, 0xb2, 0x93, 0x52,
	0xb8, 0xd4, 0xd8, 0xba, 0x89, 0x16, 0x23, 0x42, 0x51, 0x47, 0x6e, 0x7b, 0x09, 0xdf, 0x51, 0xf8,
	0x46, 0x02, 0x8f, 0x86, 0xa0, 0x8d, 0x38, 0x35, 0x55, 0x28, 0x58, 0xc9, 0x99, 0x5f, 0x6a, 0x7c,
	0xff, 0x26, 0x2a, 0x3b, 0x11, 0xce, 0x1e, 0xa7, 0xed, 0x25, 0xbc, 0x3e, 0xe2, 0xb4, 0x93, 0x02,
	0x46, 0x1e, 0xdc, 0x19, 0xf8, 0x43, 0x67, 0x56, 0x5b, 0x94, 0xb4, 0x3f, 0xb8, 0x85, 0xb6, 0x96,
	0x3f, 0x74, 0xda, 0x4b, 0x58, 0x13, 0xd8, 0x33, 0xfa, 0x86, 0xa0, 0x05, 0xfe, 0x68, 0x56, 0xdd,
	0xca, 0xad, 0x37, 0x87, 0xfd, 0x91, 0xd8, 0x5c, 0xe0, 0x8f, 0x66, 0x94, 0xc5, 0xb1, 0x41, 0xce,
	0x89, 0xad, 0x5e, 0x09, 0x9f, 0xdd, 0xcc, 0x6b, 0xc4, 0x4e, 0xc7, 0x86, 0xa0, 0xd1, 0xcf, 0x01,
	0xa2, 0xa7, 0x90, 0x19, 0x8c, 0x3d, 0x3d, 0x2f, 0xd1, 0xbf, 0x77, 0x13, 0x74, 0x3c, 0xf6, 0x7a,
	0x12, 0xa8, 0xbd, 0x84, 0x8b, 0x11, 0x24, 0x1e, 0x7b, 0xd5, 0x5f, 0x66, 0xa0, 0x10, 0x07, 0xa5,
	0x28, 0x51, 0xe3, 0x13, 0xc7, 0x4c, 0x92, 0x0b, 0x62, 0x56, 0x67, 0xa0, 0x5e, 0x6b, 0x21, 0xf5,
	0xac, 0x0b, 0xaf, 0xb5, 0x98, 0x25, 0xea, 0x6b, 0x76, 0x46, 0x82, 0x67, 0x01, 0x0d, 0xe3, 0x7c,
	0x9b, 0x32, 0x84, 0xbc, 0x4f, 0x82, 0x11, 0xe5, 0x51, 0x0d, 0x1c, 0xa5, 0x5b, 0x9a, 0x55, 0xfd,
	0x6b, 0x16, 0x2a, 0xb3, 0xe1, 0xfb, 0xdf, 0x58, 0xd5, 0x31, 0x2c, 0xcb, 0x22, 0x2a, 0x2a, 0x0a,
	0xf7, 0x6f, 0x9f, 0x53, 0x33, 0x95, 0x95, 0xc4, 0xae, 0xf1, 0x97, 0xac, 0x71, 0xfa, 0x4d, 0xac,
	0x65, 0xd0, 0x1a, 0x14, 0xfa, 0x4d, 0x6c, 0xee, 0x1c, 0x75, 0xba, 0x5a, 0x36, 0xa6, 0xb6, 0x04,
	0x95, 0x8b, 0xa9, 0xdd, 0xa3, 0xbd, 0xa6, 0xb6, 0x2c, 0xea, 0x46, 0x41, 0x3d, 0x3d, 0xd2, 0x56,
	0x84, 0xb8, 0x98, 0x52, 0xaa, 0x7e, 0x01, 0x30, 0xcd, 0xbc, 0xc5, 0x96, 0xba, 0x0b, 0x2b, 0x27,
	0xae, 0xe5, 0x24, 0x6f, 0x22, 0x49, 0xa0, 0x0f, 0x00, 0xc9, 0x23, 0x91, 0x0c, 0x4c, 0x72, 0x4e,
	0x43, 0xd3, 0x66, 0x03, 0xf5, 0x38, 0x5a, 0xc1, 0x9a, 0x1a, 0x31, 0xce, 0x69, 0xb8, 0x2d, 0xf8,
	0xd5, 0x3a, 0x94, 0x52, 0xe9, 0xb7, 0x50, 0x67, 0xf5, 0xc3, 0x64, 0x89, 0xd8, 0x1f, 0x2d, 0x9e,
	0xfe, 0x87, 0x0c, 0x14, 0xe2, 0x4c, 0x40, 0xef, 0xcc, 0x99, 0xdd, 0x5e, 0x9a, 0xd9, 0xd2, 0x3d,
	0x00, 0x97, 0xd9, 0x96, 0x6b, 0xfa, 0x56, 0x78, 0x1a, 0xf9, 0x5e, 0x44, 0xb8, 0xe4, 0x75, 0xad,
	0xf0, 0x54, 0x5c, 0xdf, 0x56, 0xe0, 0xc4, 0x8f, 0x3d, 0xf9, 0x7d, 0xc5, 0x8e, 0x97, 0xe7, 0xef,
	0x78, 0x6b, 0x1d, 0xca, 0x02, 0x4e, 0x44, 0x92, 0xac, 0xc5, 0xab, 0xbf, 0xcb, 0x42, 0x31, 0xc9,
	0x27, 0xf4, 0x2a, 0xac, 0x46, 0xf9, 0xa4, 0x76, 0xa3, 0xa8, 0x44, 0x71, 0x76, 0xa1, 0xe2, 0x2b,
	0x4c, 0x8d, 0x86, 0x50, 0xa2, 0x5e, 0x48, 0x02, 0x3f, 0x20, 0x21, 0x09, 0x64, 0xba, 0x54, 0x1a,
	0x9d, 0x5b, 0x65, 0x7f, 0xbd, 0x33, 0x05, 0xc4, 0x69, 0xf4, 0x9a, 0x21, 0xfc, 0x9a, 0x90, 0xe8,
	0x0d, 0x78, 0xad, 0xb3, 0xdf, 0x37, 0x70, 0x17, 0x1b, 0xfd, 0x4b, 0xcf, 0x9b, 0x22, 0xac, 0xf4,
	0xda, 0xc6, 0xee, 0xae, 0x96, 0x41, 0x15, 0x80, 0xee, 0xe3, 0x1f, 0x1b, 0x38, 0xa2, 0x73, 0x5b,
	0xab, 0xb0, 0x2c, 0xea, 0x88, 0xda, 0x5f, 0x32, 0xa0, 0x6f, 0xcb, 0x46, 0x4c, 0xaa, 0x05, 0x84,
	0xc9, 0x17, 0x82, 0x10, 0x26, 0xf3, 0xad, 0x80, 0x78, 0x89, 0xc9, 0x22, 0x0a, 0x7d, 0x1d, 0xd6,
	0x53, 0xcd, 0xaa, 0x89, 0xf0, 0x79, 0x94, 0xcd, 0x65, 0x67, 0x0a, 0xd2, 0x19, 0xa0, 0x7d, 0x58,
	0x4b, 0xcf, 0x53, 0x17, 0xd7, 0xfb, 0x0b, 0xeb, 0xbf, 0xd4, 0x4a, 0x4a, 0x29, 0xc4, 0xda, 0xfb,
	0xf0, 0x95, 0x1d, 0x12, 0xce, 0x59, 0xe8, 0x9c, 0xda, 0xaf, 0xe6, 0x81, 0xbe, 0x4b, 0x79, 0x6a,
	0x36, 0x25, 0x7c, 0xd1, 0xc6, 0xde, 0x80, 0xa2, 0x6f, 0x39, 0xc4, 0xe4, 0xf4, 0x79, 0xf4, 0x38,
	0x58, 0xc1, 0x05, 0xc1, 0xe8, 0xd1, 0xe7, 0x04, 0xbd, 0x05, 0x20, 0x07, 0x43, 0x36, 0x24, 0xf1,
	0xc3, 0x4b, 0x4e, 0xef, 0x0b, 0x46, 0xed, 0xb7, 0x19, 0x78, 0x7d, 0x8e, 0x42, 0xee, 0x33, 0x8f,
	0x13, 0x84, 0xa1, 0x32, 0xdb, 0xdf, 0x53, 0x3d, 0x80, 0x97, 0x32, 0x46, 0xca, 0xbc, 0x94, 0x70,
	0xe1, 0x06, 0x8f, 0x9c, 0x87, 0x66, 0x6a, 0x55, 0xca, 0x0d, 0x82, 0xdd, 0x4d, 0x56, 0xf6, 0xa7,
	0x0c, 0xe8, 0x07, 0xb2, 0xe4, 0x9b, 0x63, 0xba, 0x8b, 0x3e, 0xca, 0xdc, 0xce, 0x47, 0xa9, 0x56,
	0xde, 0xc8, 0xe2, 0x43, 0x55, 0x1e, 0x5d, 0x6e, 0xe5, 0x3d, 0xa2, 0xc4, 0x1d, 0xec, 0x59, 0x7c,
	0x18, 0xb7, 0xf2, 0xc4, 0x77, 0xad, 0x0e, 0x7a, 0x8b, 0xb8, 0x64, 0xee, 0x42, 0xe7, 0xf9, 0xf8,
	0x5f, 0x19, 0xf8, 0xea, 0x2e, 0x63, 0xc3, 0xb1, 0x6f, 0x9c, 0x9c, 0x10, 0x3b, 0xa4, 0x67, 0x64,
	0xae, 0xbf, 0xab, 0x50, 0x88, 0x5b, 0x42, 0x4a, 0x3e, 0xa1, 0xd1, 0x03, 0xb8, 0x93, 0x34, 0x93,
	0xe8, 0x60, 0xc6, 0x8e, 0xeb, 0xf1, 0x40, 0x67, 0x20, 0x2d, 0x89, 0x6a, 0x50, 0x9e, 0x69, 0x21,
	0xa9, 0x28, 0x28, 0xa5, 0x3a, 0x48, 0x22, 0x4c, 0xa6, 0x0d, 0x24, 0x75, 0x77, 0x16, 0x93, 0xfe,
	0x11, 0x7a, 0x0f, 0xd6, 0x2f, 0xb4, 0x8f, 0xd4, 0x23, 0xbc, 0x32, 0xdb, 0x3d, 0xaa, 0xfd, 0x6d,
	0x19, 0xde, 0x7d, 0xf1, 0xde, 0x54, 0x68, 0xb1, 0x54, 0xcf, 0x32, 0x0a, 0xaa, 0xde, 0x22, 0xef,
	0x5d, 0x07, 0xb7, 0xde, 0x63, 0xe3, 0xc0, 0x26, 0x83, 0xcb, 0xfd, 0xcd, 0x5f, 0x65, 0xae, 0x68,
	0x70, 0x66, 0xa5, 0xf6, 0x9f, 0xfd, 0x2f, 0xb4, 0xbf, 0xb8, 0x19, 0x5a, 0x1d, 0x8a, 0xe7, 0x60,
	0x5a, 0x40, 0x1e, 0xf7, 0x92, 0x93, 0x1c, 0xf7, 0x92, 0x42, 0x4d, 0xc8, 0x2b, 0x00, 0x15, 0x9b,
	0xd7, 0x6e, 0xf0, 0xc6, 0x72, 0xd5, 0xdf, 0x64, 0x40, 0xbf, 0x6a, 0x79, 0x57, 0xea, 0xfd, 0x05,
	0xa0, 0x4b, 0x36, 0x9b, 0xa8, 0x25, 0xdc, 0xa0, 0x25, 0x7c, 0xe7, 0xa2, 0x15, 0x26, 0x0f, 0x9e,
	0xc0, 0x5a, 0xfa, 0x51, 0x86, 0xde, 0x82, 0xd7, 0x5b, 0x46, 0xaf, 0x83, 0x8d, 0x96, 0xd9, 0xeb,
	0x37, 0xfb, 0x17, 0x6b, 0x9b, 0x32, 0x14, 0x3b, 0xfb, 0xbd, 0x7e, 0x73, 0x77, 0xd7, 0x68, 0x45,
	0x5d, 0x9c, 0x83, 0x6e, 0xab, 0xd9, 0x37, 0x5a, 0x5a, 0x56, 0x10, 0xd8, 0xd8, 0x7b, 0xfc, 0xc4,
	0x68, 0x69, 0xb9, 0xad, 0x2f, 0xa1, 0x66, 0xb3, 0xd1, 0x82, 0x25, 0x6e, 0x95, 0x67, 0xdc, 0x78,
	0xf4, 0x48, 0x4d, 0x77, 0x98, 0x6b, 0x79, 0x4e, 0x9d, 0x05, 0xce, 0xa6, 0x43, 0x3c, 0x99, 0xfe,
	0x9b, 0xd1, 0x90, 0xe5, 0x53, 0x7e, 0xd5, 0xbf, 0x90, 0x4f, 0x63, 0xce, 0xf1, 0xaa, 0x14, 0x79,
	0xf8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x16, 0x29, 0x19, 0x3d, 0x19, 0x00, 0x00,
}
